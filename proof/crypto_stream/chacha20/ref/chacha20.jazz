fn init(reg u64 key nonce, reg u32 counter) -> reg u32[16]
{
  inline int i;
  reg u32[16] st;

  st[0] = 0x61707865;
  st[1] = 0x3320646e;
  st[2] = 0x79622d32;
  st[3] = 0x6b206574;

  for i=0 to 8
  { st[4+i] = (u32)[key + 4*i]; }

  st[12] = counter;

  for i=0 to 3
  { st[13+i] = (u32)[nonce + 4*i]; }

  return st;
}



fn copy_state(reg u32[16] st) -> reg u32[16]
{
  reg   u32[16] k;
  k = st;
  return k;
}



fn line(reg u32[16] k, inline int a b c r) -> reg u32[16]
{
  k[a] += k[b];
  k[c] ^= k[a];
  _, _, k[c] = #x86_ROL_32(k[c], r);
  return k;
}



fn quarter_round(reg u32[16] k, inline int a b c d) -> reg u32[16]
{
  k = line(k, a, b, d, 16);
  k = line(k, c, d, b, 12);
  k = line(k, a, b, d, 8);
  k = line(k, c, d, b, 7);
  return k;
}

fn column_round(reg u32[16] k) -> reg u32[16] 
{
  k = quarter_round(k, 0, 4, 8, 12);
  k = quarter_round(k, 2, 6, 10, 14);

  k = quarter_round(k, 1, 5, 9, 13);
  k = quarter_round(k, 3, 7, 11, 15);
  return k;
}

fn diagonal_round(reg u32[16] k) -> reg u32[16] 
{
  k = quarter_round(k, 1, 6, 11, 12);
  k = quarter_round(k, 0, 5, 10, 15);

  k = quarter_round(k, 2, 7, 8,  13);
  k = quarter_round(k, 3, 4, 9,  14);
  return k;
}

fn round(reg u32[16] k) -> reg u32[16] 
{
  k = column_round(k);
  k = diagonal_round(k);
  return k;
}

fn rounds(reg u32[16] k) -> reg u32[16]
{
  inline int i;
  reg u32 c;

  c = 0;
  while(c < 10)
  {
    k = round(k);
    c += 1; 
  }  

  return k;
}

fn sum_states(reg u32[16] k, reg u32[16] st) -> reg u32[16]
{
  inline int i;
  for i=0 to 16
  { k[i] += st[i]; }
  return k;
}



fn update_ptr(reg u64 output plain, reg u32 len, inline int n) -> reg u64, reg u64, reg u32
{
  output += n;
  plain += n;
  len -= n;
  return output, plain, len;
}

fn store32(reg u64 output plain, reg u32 len, reg u32[16] k) -> reg u64, reg u64, reg u32
{
  inline int i;

  i = 0;
  while(i < 16) { 
    (u32)[output + 4 * i] = k[i] ^ (u32)[plain + 4 * i]; 
    i += 1;
  }

  output, plain, len = update_ptr(output, plain, len, 64);

  return output, plain, len;
}

fn store(reg u64 output plain, reg u32 len, reg u32[16] k) -> reg u64, reg u64, reg u32
{
  inline int i;

  i = 0;
  while(i < len && i < 64) { 
    (u8)[output + i] = k[u8 i] ^ (u8)[plain + i]; 
    i += 1;
  }

  output, plain, len = update_ptr(output, plain, len, i);

  return output, plain, len;
}

fn increment_counter(reg u32[16] st) -> reg u32[16]
{
  st[12] += 1;
  return st;
}

export fn chacha20_ref(reg u64 output plain, reg u32 len, reg u64 key nonce, reg u32 counter)
{
  reg u32[16] st k;

  st = init(key, nonce, counter);

  while(len > 0)
  {
    k = copy_state(st);
    k = rounds(k);
    k = sum_states(k, st);
    output, plain, len = store(output, plain, len, k); 
    st = increment_counter(st);
  }

}

fn chacha20_memory_init_ietf_test(reg u64 output plain key nonce) -> stack u8[114], reg u32
{
  inline int j;
  reg u128 bswap;
  reg u32 counter;
  reg u64 i;
  stack u8[114] expected_output;

  bswap = (16u8)[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];


  // Key = 00:01:02:03:04:05:06:07:08:09:0a:0b:0c:0d:0e:0f:10:11:12:13:
  //       14:15:16:17:18:19:1a:1b:1c:1d:1e:1f
  i = 0;
  while(i < 32)
  { (u8)[key + i] = (8u)i; i += 1; }

  // Nonce = 00:00:00:00:00:00:00:4a:00:00:00:00
  (u8)[nonce + 7] = 0x4a;

  // Counter = 1
  counter = 1;

  // Plaintext Sunscreen:
  // [0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c]
  // [0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73]
  // [0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63]
  // [0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f]
  // [0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20]
  // [0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73]
  // [0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69]
  //  0x74, 0x2e

  (u128)[plain + 0]   = (16u8)[0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c];
  (u128)[plain + 16]  = (16u8)[0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73];
  (u128)[plain + 32]  = (16u8)[0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63];
  (u128)[plain + 48]  = (16u8)[0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f];
  (u128)[plain + 64]  = (16u8)[0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20];
  (u128)[plain + 80]  = (16u8)[0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73];
  (u128)[plain + 96]  = (16u8)[0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69];
  (u8)[plain + 112]   = 0x74;
  (u8)[plain + 113]   = 0x2e;

  for j=0 to 7
  { (u128)[plain + 16*j] = #x86_VPSHUFB_128((u128)[plain + 16*j], bswap); }

  // Ciphertext Sunscreen:
  // [0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81]
  // [0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b]
  // [0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57]
  // [0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8]
  // [0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e]
  // [0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36]
  // [0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42]
  //  0x87, 0x4d
  expected_output[u128 0] = (16u8)[0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81];
  expected_output[u128 1] = (16u8)[0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b];
  expected_output[u128 2] = (16u8)[0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57];
  expected_output[u128 3] = (16u8)[0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8];
  expected_output[u128 4] = (16u8)[0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e];
  expected_output[u128 5] = (16u8)[0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36];
  expected_output[u128 6] = (16u8)[0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42];
  expected_output[112]    = 0x87;
  expected_output[113]    = 0x4d;

  for j=0 to 7
  { expected_output[u128 j] = #x86_VPSHUFB_128(expected_output[u128 j], bswap); }

  return expected_output, counter;
}

fn chacha20_ref_ietf_test_vector() -> reg u8[114]
{
  inline int j;
  reg u64 i;
  reg u64 output plain key nonce;
  reg u32 len counter;
  reg u8[114] r;

  // memory setup
  len = 114;

  output = 0x0;
  plain = 0x80;
  key = 0xF4;
  nonce = 0x114;

  // test setup
  r, counter = chacha20_memory_init_ietf_test(output, plain, key, nonce);
  
  chacha20_ref(output, plain, len, key, nonce, counter);

  // If ChaCha20 is computed correctly, r will be zeroed out
  for j=0 to 114
  { r[j] ^= (u8)[output + j]; }

  return r;
}

exec chacha20_ref_ietf_test_vector
(
  0x0:114
, 0x80:114
, 0xF4:32
, 0x114:12
)

