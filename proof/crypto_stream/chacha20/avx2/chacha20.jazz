fn init(reg u64 key nonce, reg u32 counter) -> reg u32[16]
{
  inline int i;
  reg u32[16] st;

  st[0] = 0x61707865;
  st[1] = 0x3320646e;
  st[2] = 0x79622d32;
  st[3] = 0x6b206574;

  for i=0 to 8
  { st[4+i] = (u32)[key + 4*i]; }

  st[12] = counter;

  for i=0 to 3
  { st[13+i] = (u32)[nonce + 4*i]; }

  return st;
}



fn init_x2(reg u64 key nonce, reg u32 counter) -> reg u32[16], reg u32[16]
{
  reg u32[16] st_1 st_2;
  st_1 = init(key, nonce, counter); counter += 1;
  st_2 = init(key, nonce, counter);
  return st_1, st_2;
}



fn init_x8(reg u64 key nonce, reg u32 counter) ->
  reg u32[16], reg u32[16], reg u32[16], reg u32[16],
  reg u32[16], reg u32[16], reg u32[16], reg u32[16]
{
  reg u32[16] st_1 st_2 st_3 st_4 st_5 st_6 st_7 st_8;

  st_1 = init(key, nonce, counter); counter += 1;
  st_2 = init(key, nonce, counter); counter += 1;
  st_3 = init(key, nonce, counter); counter += 1;
  st_4 = init(key, nonce, counter); counter += 1;
  st_5 = init(key, nonce, counter); counter += 1;
  st_6 = init(key, nonce, counter); counter += 1;
  st_7 = init(key, nonce, counter); counter += 1;
  st_8 = init(key, nonce, counter);

  return st_1, st_2, st_3, st_4, st_5, st_6, st_7, st_8;
}



fn copy_state(reg u32[16] st) -> reg u32[16]
{
  reg   u32[16] k;
  k = st;
  return k;
}



fn copy_state_x2(reg u32[16] st_1 st_2) -> reg u32[16], reg u32[16]
{
  reg u32[16] k_1 k_2;
  k_1 = copy_state(st_1);
  k_2 = copy_state(st_2);
  return k_1, k_2;
}



fn copy_state_x4(reg u32[16] st_1 st_2) -> reg u32[16], reg u32[16], reg u32[16], reg u32[16]
{
  reg u32[16] k_1 k_2 k_3 k_4;
  k_1 = copy_state(st_1);
  k_2 = copy_state(st_2);
  k_3 = copy_state(st_1);
  k_4 = copy_state(st_2);
  k_3[12] += 2;
  k_4[12] += 2;
  return k_1, k_2, k_3, k_4;
}



fn copy_state_x8(reg u32[16] st_1 st_2 st_3 st_4 st_5 st_6 st_7 st_8) ->
  reg u32[16], reg u32[16], reg u32[16], reg u32[16],
  reg u32[16], reg u32[16], reg u32[16], reg u32[16]
{
  reg u32[16] k_1 k_2 k_3 k_4 k_5 k_6 k_7 k_8;
  k_1 = copy_state(st_1);
  k_2 = copy_state(st_2);
  k_3 = copy_state(st_3);
  k_4 = copy_state(st_4);
  k_5 = copy_state(st_5);
  k_6 = copy_state(st_6);
  k_7 = copy_state(st_7);
  k_8 = copy_state(st_8);
  return k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8;
}



fn sum_states(reg u32[16] k st) -> reg u32[16]
{
  inline int i;
  for i=0 to 16
  { k[i] += st[i]; }
  return k;
}



fn sum_states_x2(reg u32[16] k_1 k_2 st_1 st_2) -> reg u32[16], reg u32[16]
{
  k_1 = sum_states(k_1, st_1);
  k_2 = sum_states(k_2, st_2);
  return k_1, k_2;
}



fn sum_states_x4(reg u32[16] k1_1 k1_2 k2_1 k2_2 st_1 st_2) ->
  reg u32[16], reg u32[16], reg u32[16], reg u32[16]
{
  k1_1, k1_2 = sum_states_x2(k1_1, k1_2, st_1, st_2);
  k2_1, k2_2 = sum_states_x2(k2_1, k2_2, st_1, st_2);
  k2_1[12] += 2;
  k2_2[12] += 2;
  return k1_1, k1_2, k2_1, k2_2;
}



fn sum_states_x8(reg u32[16] k_1  k_2  k_3  k_4  k_5  k_6  k_7  k_8
                             st_1 st_2 st_3 st_4 st_5 st_6 st_7 st_8) ->
  reg u32[16], reg u32[16], reg u32[16], reg u32[16],
  reg u32[16], reg u32[16], reg u32[16], reg u32[16]
{
  k_1 = sum_states(k_1, st_1);
  k_2 = sum_states(k_2, st_2);
  k_3 = sum_states(k_3, st_3);
  k_4 = sum_states(k_4, st_4);
  k_5 = sum_states(k_5, st_5);
  k_6 = sum_states(k_6, st_6);
  k_7 = sum_states(k_7, st_7);
  k_8 = sum_states(k_8, st_8);
  return k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8;
}



fn update_ptr(reg u64 output plain, reg u32 len, inline int n) -> reg u64, reg u64, reg u32
{
  output += n;
  plain += n;
  len -= n;
  return output, plain, len;
}



fn store(reg u64 output plain, reg u32 len, reg u32[16] k) -> reg u64, reg u64, reg u32
{
  inline int i;

  for i=0 to 16
  { k[i] ^= (u32)[plain + 4*i];
    (u32)[output + 4*i] = k[i]; }

  output, plain, len = update_ptr(output, plain, len, 64);

  return output, plain, len;
}



fn store_last(reg u64 output plain, reg u32 len, reg u32[16] k)
{
  inline int i;
  reg u64 j;
  stack u32[16] s_k;
  reg u8 pi;

  // copy k to stack
  s_k = k;
  
  // store
  j = 0;
  while(j < len)
  {
    pi = (u8)[plain + j];
    pi ^= s_k[u8 (int)j];
    (u8)[output + j] = pi;
    j += 1;
  }
}



fn store_x2(reg u64 output plain, reg u32 len,
  reg u32[16] k_1 k_2
) -> reg u64, reg u64, reg u32
{
  output, plain, len = store(output, plain, len, k_1);
  output, plain, len = store(output, plain, len, k_2);
  return output, plain, len;
}



fn store_x2_last(reg u64 output plain, reg u32 len,
  reg u32[16] k_1 k_2
)
{
  reg u32[16] r;
  r = k_1;
  if(len >= 64)
  { output, plain, len = store(output, plain, len, r);
    r = k_2;
  }
  store_last(output, plain, len, r);
}



fn store_x4(reg u64 output plain, reg u32 len,
  reg u32[16] k_1 k_2 k_3 k_4
) -> reg u64, reg u64, reg u32
{
  output, plain, len = store(output, plain, len, k_1);
  output, plain, len = store(output, plain, len, k_2);
  output, plain, len = store(output, plain, len, k_3);
  output, plain, len = store(output, plain, len, k_4);
  return output, plain, len;
}



fn store_x4_last(reg u64 output plain, reg u32 len,
  reg u32[16] k_1 k_2 k_3 k_4
)
{
  reg u32[16] r_1 r_2;
  r_1 = k_1;
  r_2 = k_2;
  if(len >= 128)
  { output, plain, len = store_x2(output, plain, len, r_1, r_2);
    r_1 = k_3;
    r_2 = k_4;
  }
  store_x2_last(output, plain, len, r_1, r_2);
}



fn store_x8(reg u64 output plain, reg u32 len, 
  reg u32[16] k_1 k_2 k_3 k_4 k_5 k_6 k_7 k_8
) ->  reg u64, reg u64, reg u32
{
  output, plain, len = store(output, plain, len, k_1);
  output, plain, len = store(output, plain, len, k_2);
  output, plain, len = store(output, plain, len, k_3);
  output, plain, len = store(output, plain, len, k_4);
  output, plain, len = store(output, plain, len, k_5);
  output, plain, len = store(output, plain, len, k_6);
  output, plain, len = store(output, plain, len, k_7);
  output, plain, len = store(output, plain, len, k_8);
  return output, plain, len;
}



fn store_x8_last(reg u64 output plain, reg u32 len,
  reg u32[16] k_1 k_2 k_3 k_4 k_5 k_6 k_7 k_8
)
{
  reg u32[16] r_1 r_2 r_3 r_4;
  r_1 = k_1;
  r_2 = k_2;
  r_3 = k_3;
  r_4 = k_4;
  if(len >= 256)
  {
    output, plain, len = store_x4(output, plain, len, r_1, r_2, r_3, r_4);
    r_1 = k_5;
    r_2 = k_6;
    r_3 = k_7;
    r_4 = k_8;
  }

  store_x4_last(output, plain, len, r_1, r_2, r_3, r_4);
}



fn increment_counter(reg u32[16] st) -> reg u32[16]
{
  // WARNING : since we are evaluating 8 rounds at a time, the increment happens by a factor of 8. 
  //           this implementation of increment_counter differs from the one that can be found in
  //           reference implementation.
  st[12] += 8;
  return st;
}



fn increment_counter_x8(reg u32[16] st_1 st_2 st_3 st_4 st_5 st_6 st_7 st_8) ->
  reg u32[16], reg u32[16], reg u32[16], reg u32[16],
  reg u32[16], reg u32[16], reg u32[16], reg u32[16]
{
  st_1 = increment_counter(st_1);
  st_2 = increment_counter(st_2);
  st_3 = increment_counter(st_3);
  st_4 = increment_counter(st_4);
  st_5 = increment_counter(st_5);
  st_6 = increment_counter(st_6);
  st_7 = increment_counter(st_7);
  st_8 = increment_counter(st_8);
  return st_1, st_2, st_3, st_4, st_5, st_6, st_7, st_8;
}



fn line(reg u32[16] k, inline int a b c r) -> reg u32[16]
{
  k[a] += k[b];
  k[c] ^= k[a];
  _, _, k[c] = #x86_ROL_32(k[c], r);
  return k;
}



fn line_x8_v1(reg u32[16] k1 k2 k3 k4 k5 k6 k7 k8, inline int a b c r
) -> reg u32[16], reg u32[16], reg u32[16], reg u32[16],
     reg u32[16], reg u32[16], reg u32[16], reg u32[16]
{
  k1 = line(k1, a, b, c, r);
  k2 = line(k2, a, b, c, r);
  k3 = line(k3, a, b, c, r);
  k4 = line(k4, a, b, c, r);
  k5 = line(k5, a, b, c, r);
  k6 = line(k6, a, b, c, r);
  k7 = line(k7, a, b, c, r);
  k8 = line(k8, a, b, c, r);

  return k1, k2, k3, k4, k5, k6, k7, k8;
}


fn line_x8_v2(reg u32[16] k1 k2 k3 k4 k5 k6 k7 k8, inline int a b c r
) -> reg u32[16], reg u32[16], reg u32[16], reg u32[16],
     reg u32[16], reg u32[16], reg u32[16], reg u32[16]
{
  k1[a] += k1[b];
  k2[a] += k2[b];
  k3[a] += k3[b];
  k4[a] += k4[b];
  k5[a] += k5[b];
  k6[a] += k6[b];
  k7[a] += k7[b];
  k8[a] += k8[b];

  k1[c] ^= k1[a];
  k2[c] ^= k2[a];
  k3[c] ^= k3[a];
  k4[c] ^= k4[a];
  k5[c] ^= k5[a];
  k6[c] ^= k6[a];
  k7[c] ^= k7[a];
  k8[c] ^= k8[a];

  _, _, k1[c] = #x86_ROL_32(k1[c], r);
  _, _, k2[c] = #x86_ROL_32(k2[c], r);
  _, _, k3[c] = #x86_ROL_32(k3[c], r);
  _, _, k4[c] = #x86_ROL_32(k4[c], r);
  _, _, k5[c] = #x86_ROL_32(k5[c], r);
  _, _, k6[c] = #x86_ROL_32(k6[c], r);
  _, _, k7[c] = #x86_ROL_32(k7[c], r);
  _, _, k8[c] = #x86_ROL_32(k8[c], r);

  return k1, k2, k3, k4, k5, k6, k7, k8;
}


fn quarter_round(reg u32[16] k, inline int a b c d) -> reg u32[16]
{
  k = line(k, a, b, d, 16);
  k = line(k, c, d, b, 12);
  k = line(k, a, b, d, 8);
  k = line(k, c, d, b, 7);
  return k;
}



fn rounds(reg u32[16] k) -> reg u32[16]
{
  inline int i;
  reg u32 c;

  c = 0;
  while(c < 10)
  {
    k = quarter_round(k, 0, 4, 8, 12);
    k = quarter_round(k, 2, 6, 10, 14);

    k = quarter_round(k, 1, 5, 9, 13);
    k = quarter_round(k, 3, 7, 11, 15);

    k = quarter_round(k, 1, 6, 11, 12);
    k = quarter_round(k, 0, 5, 10, 15);

    k = quarter_round(k, 2, 7, 8,  13);
    k = quarter_round(k, 3, 4, 9,  14); 

    c += 1; 
  }  

  return k;
}



fn rounds_x2(reg u32[16] k_1  k_2) ->
  reg u32[16], reg u32[16]
{
  k_1 = rounds(k_1);
  k_2 = rounds(k_2);
  return k_1, k_2;
}



fn rounds_x4(reg u32[16] k_1  k_2  k_3  k_4) ->
  reg u32[16], reg u32[16], reg u32[16], reg u32[16]
{
  k_1 = rounds(k_1);
  k_2 = rounds(k_2);
  k_3 = rounds(k_3);
  k_4 = rounds(k_4);
  return k_1, k_2, k_3, k_4;
}



fn rounds_x8(reg u32[16] k_1  k_2  k_3  k_4  k_5  k_6  k_7  k_8) ->
  reg u32[16], reg u32[16], reg u32[16], reg u32[16],
  reg u32[16], reg u32[16], reg u32[16], reg u32[16]
{
  k_1 = rounds(k_1);
  k_2 = rounds(k_2);
  k_3 = rounds(k_3);
  k_4 = rounds(k_4);
  k_5 = rounds(k_5);
  k_6 = rounds(k_6);
  k_7 = rounds(k_7);
  k_8 = rounds(k_8);
  return k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8;
}



fn chacha20_more_than_256(reg u64 output plain, reg u32 len, reg u64 key nonce, reg u32 counter)
{
  reg u32[16] st_1 st_2 st_3 st_4 st_5 st_6 st_7 st_8;
  reg u32[16]  k_1  k_2  k_3  k_4  k_5  k_6  k_7  k_8;

  st_1, st_2, st_3, st_4, st_5, st_6, st_7, st_8 = init_x8(key, nonce, counter);

  while(len >= 512)
  {
    k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8 = copy_state_x8(st_1, st_2, st_3, st_4, st_5, st_6, st_7, st_8);
    k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8 = rounds_x8(k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8);
    k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8 = sum_states_x8(k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8,
                                                           st_1, st_2, st_3, st_4, st_5, st_6, st_7, st_8);
    output, plain, len = store_x8(output, plain, len, k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8);
    st_1, st_2, st_3, st_4, st_5, st_6, st_7, st_8 = increment_counter_x8(st_1, st_2, st_3, st_4, st_5, st_6, st_7, st_8);
  }

  if(len > 0)
  {
    k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8 = copy_state_x8(st_1, st_2, st_3, st_4, st_5, st_6, st_7, st_8);
    k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8 = rounds_x8(k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8);
    k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8 = sum_states_x8(k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8,
                                                           st_1, st_2, st_3, st_4, st_5, st_6, st_7, st_8);
    store_x8_last(output, plain, len, k_1, k_2, k_3, k_4, k_5, k_6, k_7, k_8);
  }
}



fn chacha20_less_than_257(reg u64 output plain, reg u32 len, reg u64 key nonce, reg u32 counter)
{
  reg u32[16] st_1 st_2 k1_1 k1_2 k2_1 k2_2;

  st_1, st_2 = init_x2(key, nonce, counter); 

  if(len > 128)
  {
    k1_1, k1_2, k2_1, k2_2 = copy_state_x4(st_1, st_2);
    k1_1, k1_2, k2_1, k2_2 = rounds_x4(k1_1, k1_2, k2_1, k2_2);
    k1_1, k1_2, k2_1, k2_2 = sum_states_x4(k1_1, k1_2, k2_1, k2_2, st_1, st_2);
    // call to perm_x4 isn't necessary in this implementation
    output, plain, len = store_x2(output, plain, len, k1_1, k1_2);
                         store_x2_last(output, plain, len, k2_1, k2_2);
  }
  else
  {
    k1_1, k1_2 = copy_state_x2(st_1, st_2);
    k1_1, k1_2 = rounds_x2(k1_1, k1_2);
    k1_1, k1_2 = sum_states_x2(k1_1, k1_2, st_1, st_2);
    // call to perm_x2 isn't necessary in this implementation
         store_x2_last(output, plain, len, k1_1, k1_2);
  }
}



export fn chacha20_avx2(reg u64 output plain, reg u32 len, reg u64 key nonce, reg u32 counter)
{
  if(len < 257)
  { chacha20_less_than_257(output, plain, len, key, nonce, counter); }
  else
  { chacha20_more_than_256(output, plain, len, key, nonce, counter); }
}






// actual implementation ends here, this is only for testing
u128 bswap = (16u8)[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];

fn chacha20_memory_init_ietf_test(reg u64 output plain key nonce) -> stack u8[114], reg u32
{
  inline int j;
  reg u32 counter;
  reg u64 i;
  stack u8[114] re;

  // Key = 00:01:02:03:04:05:06:07:08:09:0a:0b:0c:0d:0e:0f:10:11:12:13:
  //       14:15:16:17:18:19:1a:1b:1c:1d:1e:1f
  i = 0;
  while(i < 32)
  { (u8)[key + i] = (8u)i; i += 1; }

  // Nonce = 00:00:00:00:00:00:00:4a:00:00:00:00
  (u8)[nonce + 7] = 0x4a;

  // Counter = 1
  counter = 1;

  // Plaintext Sunscreen:
  // [0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c]
  // [0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73]
  // [0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63]
  // [0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f]
  // [0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20]
  // [0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73]
  // [0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69]
  //  0x74, 0x2e

  (u128)[plain + 0]   = (16u8)[0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c];
  (u128)[plain + 16]  = (16u8)[0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73];
  (u128)[plain + 32]  = (16u8)[0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63];
  (u128)[plain + 48]  = (16u8)[0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f];
  (u128)[plain + 64]  = (16u8)[0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20];
  (u128)[plain + 80]  = (16u8)[0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73];
  (u128)[plain + 96]  = (16u8)[0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69];
  (u8)[plain + 112]   = 0x74;
  (u8)[plain + 113]   = 0x2e;

  for j=0 to 7
  { (u128)[plain + 16*j] = #x86_VPSHUFB_128((u128)[plain + 16*j], bswap); }

  // Ciphertext Sunscreen:
  // [0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81]
  // [0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b]
  // [0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57]
  // [0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8]
  // [0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e]
  // [0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36]
  // [0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42]
  //  0x87, 0x4d
  re[u128 0] = (16u8)[0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81];
  re[u128 1] = (16u8)[0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b];
  re[u128 2] = (16u8)[0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57];
  re[u128 3] = (16u8)[0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8];
  re[u128 4] = (16u8)[0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e];
  re[u128 5] = (16u8)[0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36];
  re[u128 6] = (16u8)[0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42];
  re[112]    = 0x87;
  re[113]    = 0x4d;

  for j=0 to 7
  { re[u128 j] = #x86_VPSHUFB_128(re[u128 j], bswap); }

  return re, counter;
}



fn chacha20_memory_init_ietf_test_extended(reg u64 output plain key nonce) -> stack u8[1088], reg u32
{
  inline int i, j;
  stack u8[114] r;
  stack u8[1088] re;
  reg u32 counter;

  r, counter = chacha20_memory_init_ietf_test(output, plain, key, nonce);

  // plain will repeat itself: 114*9 = 1026 + 62 = 1088
  for i=1 to 9 // 1..8
  { for j=0 to 114 // 0..113 -- 8*114 = 912 + 113 = 1025
    { (u8)[plain + (i*114) + j] = (u8)[plain + j]; }
  }
  for j=0 to 62 // 0..61 -- 1026+0..1026+61 = 1087
  { (u8)[plain + (9*114) + j] = (u8)[plain + j]; }

  // expected output
  re[u128  0] = (16u8)[0x6E, 0x2E, 0x35, 0x9A, 0x25, 0x68, 0xF9, 0x80, 0x41, 0xBA, 0x07, 0x28, 0xDD, 0x0D, 0x69, 0x81];
  re[u128  1] = (16u8)[0xE9, 0x7E, 0x7A, 0xEC, 0x1D, 0x43, 0x60, 0xC2, 0x0A, 0x27, 0xAF, 0xCC, 0xFD, 0x9F, 0xAE, 0x0B];
  re[u128  2] = (16u8)[0xF9, 0x1B, 0x65, 0xC5, 0x52, 0x47, 0x33, 0xAB, 0x8F, 0x59, 0x3D, 0xAB, 0xCD, 0x62, 0xB3, 0x57];
  re[u128  3] = (16u8)[0x16, 0x39, 0xD6, 0x24, 0xE6, 0x51, 0x52, 0xAB, 0x8F, 0x53, 0x0C, 0x35, 0x9F, 0x08, 0x61, 0xD8];
  re[u128  4] = (16u8)[0x07, 0xCA, 0x0D, 0xBF, 0x50, 0x0D, 0x6A, 0x61, 0x56, 0xA3, 0x8E, 0x08, 0x8A, 0x22, 0xB6, 0x5E];
  re[u128  5] = (16u8)[0x52, 0xBC, 0x51, 0x4D, 0x16, 0xCC, 0xF8, 0x06, 0x81, 0x8C, 0xE9, 0x1A, 0xB7, 0x79, 0x37, 0x36];
  re[u128  6] = (16u8)[0x5A, 0xF9, 0x0B, 0xBF, 0x74, 0xA3, 0x5B, 0xE6, 0xB4, 0x0B, 0x8E, 0xED, 0xF2, 0x78, 0x5E, 0x42];
  re[u128  7] = (16u8)[0x87, 0x4D, 0x38, 0x62, 0x17, 0x49, 0x7F, 0xD2, 0xA8, 0x9A, 0xD2, 0x8C, 0x19, 0xD6, 0xA1, 0x83];
  re[u128  8] = (16u8)[0xBC, 0x81, 0x63, 0x21, 0x0B, 0xFD, 0xBD, 0x2F, 0x57, 0x55, 0x9A, 0x89, 0x22, 0x70, 0x90, 0x89];
  re[u128  9] = (16u8)[0xC8, 0xDD, 0xF8, 0x66, 0xAE, 0x2B, 0x8D, 0x6D, 0xAF, 0x11, 0xF0, 0x8F, 0x4F, 0x2C, 0x01, 0x99];
  re[u128 10] = (16u8)[0x2A, 0x11, 0x3C, 0xD8, 0x94, 0xAB, 0xAE, 0xDF, 0xFE, 0x0A, 0x5B, 0x1A, 0x52, 0xBF, 0xB1, 0x10];
  re[u128 11] = (16u8)[0x6D, 0xEF, 0x18, 0xA7, 0xE3, 0x81, 0xF3, 0x79, 0x24, 0x1D, 0xF2, 0xD5, 0x7E, 0xF5, 0x0D, 0x7C];
  re[u128 12] = (16u8)[0xDC, 0xF3, 0x81, 0x8F, 0x9F, 0xAD, 0x6F, 0x29, 0x44, 0x10, 0x35, 0x4D, 0x19, 0x44, 0xBF, 0xE6];
  re[u128 13] = (16u8)[0x0F, 0x8C, 0x40, 0x37, 0x48, 0xD2, 0xA8, 0x56, 0x12, 0x1A, 0xF0, 0xCC, 0x81, 0x51, 0x19, 0x64];
  re[u128 14] = (16u8)[0xE9, 0xE4, 0x49, 0x60, 0xCF, 0xA6, 0xC2, 0xB2, 0xC9, 0x86, 0x04, 0x81, 0xAA, 0xF6, 0x61, 0xE8];
  re[u128 15] = (16u8)[0xE2, 0x65, 0x67, 0x1F, 0x70, 0xC8, 0x40, 0x17, 0xC0, 0xBE, 0x23, 0x5D, 0x0D, 0xC9, 0xA8, 0x06];
  re[u128 16] = (16u8)[0xA8, 0x3D, 0xD4, 0xD1, 0x6E, 0x9D, 0x57, 0x6E, 0xCC, 0x50, 0x68, 0xD2, 0xA3, 0x10, 0x9A, 0x3E];
  re[u128 17] = (16u8)[0x7F, 0x88, 0x1A, 0xA4, 0xD8, 0x35, 0xDF, 0x69, 0x28, 0x69, 0x3C, 0x6A, 0xB7, 0x33, 0x01, 0xD4];
  re[u128 18] = (16u8)[0x5E, 0x0A, 0x97, 0x2D, 0xCE, 0x8D, 0x20, 0x5D, 0xF2, 0xA7, 0x70, 0x4F, 0x74, 0x81, 0x25, 0x85];
  re[u128 19] = (16u8)[0xAF, 0xBB, 0xAA, 0x9C, 0xB7, 0xDC, 0x45, 0x17, 0x44, 0x5E, 0xCF, 0xD9, 0xBF, 0xF7, 0x55, 0x1D];
  re[u128 20] = (16u8)[0xFA, 0x88, 0xB9, 0x43, 0x08, 0xFA, 0xA5, 0x08, 0x15, 0xCB, 0x63, 0x6B, 0x75, 0xF0, 0x34, 0x9B];
  re[u128 21] = (16u8)[0x05, 0x81, 0x19, 0xE5, 0x40, 0xBA, 0x3E, 0x4D, 0x83, 0x07, 0x15, 0xBC, 0xB8, 0x4A, 0x6B, 0x07];
  re[u128 22] = (16u8)[0x1A, 0x5B, 0x73, 0xE4, 0x92, 0x39, 0x47, 0x4E, 0xCC, 0xCB, 0xC7, 0xD6, 0x76, 0x36, 0xEB, 0xBB];
  re[u128 23] = (16u8)[0x7E, 0x40, 0x3B, 0x74, 0x22, 0x96, 0x99, 0xAF, 0xD6, 0xC0, 0x1F, 0x18, 0x55, 0x14, 0x2E, 0x3F];
  re[u128 24] = (16u8)[0x53, 0xFD, 0x82, 0x9D, 0x9B, 0x0D, 0x1B, 0xFB, 0x10, 0x44, 0xAE, 0x22, 0x0E, 0x47, 0x47, 0xE6];
  re[u128 25] = (16u8)[0xAE, 0x46, 0x02, 0x20, 0x18, 0xC7, 0x89, 0xA9, 0x34, 0xF7, 0x74, 0x2E, 0x2B, 0xD5, 0x33, 0x89];
  re[u128 26] = (16u8)[0xC7, 0xFB, 0x83, 0xCB, 0x65, 0x29, 0x62, 0xE0, 0x7D, 0x89, 0x2B, 0x73, 0x6C, 0x07, 0xF2, 0x58];
  re[u128 27] = (16u8)[0x22, 0x2A, 0xF3, 0x47, 0xA9, 0x63, 0xBE, 0xB4, 0x54, 0x9F, 0xFB, 0x69, 0xA8, 0xC2, 0x34, 0x5A];
  re[u128 28] = (16u8)[0xDC, 0xAC, 0xF8, 0xF1, 0x01, 0x8A, 0xD3, 0x92, 0xAD, 0x0A, 0x1B, 0xE5, 0x1E, 0x79, 0x0D, 0x1D];
  re[u128 29] = (16u8)[0x4F, 0x1E, 0x39, 0xC5, 0x12, 0xBC, 0x6A, 0xF2, 0x91, 0xFB, 0x07, 0xAA, 0x30, 0x15, 0xB9, 0xF8];
  re[u128 30] = (16u8)[0x67, 0xEA, 0xB2, 0x93, 0x7D, 0xF3, 0x16, 0x20, 0x1B, 0xD0, 0x54, 0x70, 0x8E, 0x1D, 0xA4, 0xBA];
  re[u128 31] = (16u8)[0x7F, 0xDD, 0xF1, 0x35, 0xB6, 0xFB, 0x9C, 0xB2, 0xD9, 0x79, 0x68, 0xBA, 0x0A, 0x4C, 0x10, 0xC6];
  re[u128 32] = (16u8)[0x84, 0x4C, 0x1C, 0xE6, 0x89, 0x7E, 0x91, 0x7E, 0x24, 0x67, 0x64, 0x47, 0x27, 0x7E, 0x3A, 0x27];
  re[u128 33] = (16u8)[0x84, 0xC3, 0x3F, 0xC5, 0x11, 0xCE, 0x9C, 0xDF, 0x06, 0xB3, 0x28, 0x44, 0xD0, 0xE3, 0xAB, 0x1D];
  re[u128 34] = (16u8)[0xCE, 0xF7, 0xDA, 0xA2, 0x3B, 0x82, 0xDA, 0x42, 0x5E, 0x12, 0xDB, 0xD0, 0x04, 0x11, 0x81, 0x9F];
  re[u128 35] = (16u8)[0xF2, 0xCA, 0xD6, 0xD3, 0x00, 0xEE, 0x12, 0xD7, 0x2E, 0xBD, 0xE8, 0x7E, 0x6F, 0x98, 0x60, 0x8A];
  re[u128 36] = (16u8)[0xA3, 0xF3, 0xCA, 0xBE, 0x77, 0x91, 0x05, 0xFA, 0x45, 0x28, 0x09, 0x76, 0xFD, 0x33, 0x10, 0xA6];
  re[u128 37] = (16u8)[0x47, 0xF4, 0xB8, 0xF2, 0x70, 0x83, 0x43, 0xCB, 0x27, 0xD5, 0x6D, 0x0A, 0xAA, 0x09, 0xED, 0x56];
  re[u128 38] = (16u8)[0xB9, 0x4E, 0x9E, 0x36, 0x34, 0x54, 0x6F, 0x5D, 0x0B, 0x47, 0x48, 0xB7, 0x83, 0x6F, 0xFE, 0x9E];
  re[u128 39] = (16u8)[0x08, 0xF0, 0xE8, 0x67, 0xF0, 0x88, 0x67, 0x51, 0xF2, 0x34, 0xC3, 0x3A, 0xA3, 0x7C, 0xFF, 0xBA];
  re[u128 40] = (16u8)[0xDF, 0x5C, 0x2A, 0xB7, 0x89, 0xA1, 0xC4, 0x05, 0x5F, 0xFC, 0x75, 0x7B, 0xE7, 0x55, 0x6D, 0x78];
  re[u128 41] = (16u8)[0x92, 0x58, 0xE5, 0x29, 0x37, 0xC7, 0x2B, 0x3D, 0x37, 0xFD, 0x7F, 0xDF, 0x21, 0xA2, 0x20, 0xEA];
  re[u128 42] = (16u8)[0x8D, 0xA3, 0xB1, 0xB7, 0xC6, 0xAC, 0x3D, 0xB4, 0x84, 0x11, 0x5A, 0x61, 0x5D, 0x54, 0x1F, 0xB8];
  re[u128 43] = (16u8)[0x3E, 0x12, 0x95, 0xD9, 0x70, 0xA1, 0xF4, 0xA0, 0x8A, 0xD8, 0xEF, 0xA2, 0xD8, 0x9C, 0xAB, 0xA2];
  re[u128 44] = (16u8)[0x97, 0xC2, 0x49, 0xB9, 0x1B, 0x43, 0x56, 0x34, 0xBF, 0x3B, 0xEC, 0xF0, 0x4B, 0xA6, 0xD7, 0xE5];
  re[u128 45] = (16u8)[0x60, 0xC5, 0x98, 0xF8, 0xBD, 0xC6, 0xD4, 0xB8, 0x8A, 0x87, 0x24, 0xCF, 0x1A, 0x49, 0x0B, 0x48];
  re[u128 46] = (16u8)[0x66, 0x44, 0x42, 0xF7, 0x80, 0x66, 0xD1, 0xBB, 0x81, 0x24, 0xF6, 0x18, 0xEE, 0xB7, 0x0C, 0xF6];
  re[u128 47] = (16u8)[0xFE, 0xC2, 0x34, 0xB9, 0x7B, 0x6E, 0x39, 0x05, 0xC5, 0xE9, 0x16, 0x69, 0xB1, 0x24, 0x8E, 0x89];
  re[u128 48] = (16u8)[0xC0, 0x5E, 0x5F, 0x75, 0x6C, 0x60, 0xE7, 0x92, 0x37, 0x02, 0x48, 0xB1, 0x54, 0x5F, 0x5F, 0xAD];
  re[u128 49] = (16u8)[0x93, 0xD7, 0x1B, 0x5C, 0x19, 0x10, 0xC4, 0x65, 0x01, 0x3A, 0x3C, 0x9A, 0x53, 0xF8, 0xFB, 0xC6];
  re[u128 50] = (16u8)[0x09, 0x07, 0xA4, 0xA1, 0xD5, 0x77, 0xB1, 0x6C, 0x0E, 0x3A, 0xE8, 0xC9, 0x1C, 0x7C, 0xB6, 0xEA];
  re[u128 51] = (16u8)[0x50, 0x34, 0x9F, 0x8B, 0x1C, 0x83, 0x50, 0x90, 0x18, 0xA0, 0xB9, 0xF9, 0x55, 0x15, 0xB2, 0xFF];
  re[u128 52] = (16u8)[0xDB, 0x55, 0x8E, 0xF3, 0xB5, 0xE0, 0x0D, 0xD9, 0x9B, 0x50, 0x96, 0xD8, 0xF5, 0xE4, 0x9D, 0x09];
  re[u128 53] = (16u8)[0x64, 0x0C, 0xE8, 0x3C, 0x75, 0x78, 0x33, 0xD0, 0xC4, 0xFE, 0xE3, 0xC8, 0x23, 0x8D, 0x1E, 0xA5];
  re[u128 54] = (16u8)[0x02, 0x4A, 0x2F, 0x7C, 0xFB, 0x82, 0x2A, 0xC0, 0x7C, 0x1A, 0x99, 0xE8, 0x5E, 0x3B, 0xF0, 0x9A];
  re[u128 55] = (16u8)[0xD9, 0xA8, 0xE3, 0x58, 0x2B, 0xA9, 0xD7, 0x42, 0xDC, 0x5C, 0x5B, 0x64, 0x05, 0x01, 0xF9, 0xBC];
  re[u128 56] = (16u8)[0x4A, 0x84, 0x96, 0x2E, 0x18, 0x5C, 0x4C, 0xB0, 0x71, 0x8A, 0x4E, 0x5C, 0x46, 0x88, 0x7D, 0x4D];
  re[u128 57] = (16u8)[0x7A, 0xE6, 0xA4, 0xF4, 0xF7, 0x14, 0x85, 0x58, 0xE0, 0x54, 0xBF, 0x74, 0xA1, 0x7B, 0x9D, 0x43];
  re[u128 58] = (16u8)[0x34, 0xA9, 0x47, 0x30, 0x45, 0x81, 0x66, 0x3F, 0x66, 0x80, 0xB7, 0x4E, 0x2B, 0xE4, 0x90, 0x2E];
  re[u128 59] = (16u8)[0x60, 0x1C, 0xE8, 0xB5, 0xB7, 0x81, 0x1A, 0x5B, 0xDC, 0x27, 0x77, 0xDB, 0x03, 0xE0, 0x7B, 0xF6];
  re[u128 60] = (16u8)[0x1C, 0xE6, 0x3A, 0xB4, 0x70, 0x95, 0xAF, 0x05, 0x14, 0x47, 0x9A, 0xB2, 0x4B, 0x0D, 0xA3, 0x26];
  re[u128 61] = (16u8)[0xC4, 0xDA, 0x79, 0xDA, 0x7A, 0xAB, 0xC9, 0x12, 0x18, 0xC4, 0x8D, 0xBF, 0x63, 0xC0, 0x88, 0xAE];
  re[u128 62] = (16u8)[0xB4, 0x96, 0xAF, 0x17, 0xA6, 0xA1, 0xE5, 0x48, 0x71, 0xB2, 0x2F, 0x08, 0xB1, 0x86, 0x6B, 0x29];
  re[u128 63] = (16u8)[0x22, 0x52, 0x1A, 0x15, 0x60, 0xE0, 0x31, 0x9B, 0x82, 0xFA, 0x06, 0x19, 0xC0, 0xFB, 0xF3, 0x93];
  re[u128 64] = (16u8)[0xE9, 0xA8, 0x41, 0xD9, 0x03, 0x72, 0xC7, 0xE9, 0xFD, 0x0B, 0x4A, 0xA3, 0xB9, 0x48, 0x3C, 0xAB];
  re[u128 65] = (16u8)[0x93, 0xF6, 0x26, 0x3B, 0x7C, 0x56, 0x71, 0x6F, 0x64, 0x1F, 0x1C, 0x6E, 0x29, 0xFB, 0xB3, 0x98];
  re[u128 66] = (16u8)[0x23, 0xCD, 0x09, 0xF6, 0x37, 0xCC, 0xC7, 0xF0, 0x39, 0x49, 0x99, 0xED, 0xE3, 0x65, 0xA3, 0xD4];
  re[u128 67] = (16u8)[0xC1, 0x04, 0xC3, 0x70, 0x45, 0x91, 0x3F, 0xEA, 0x4D, 0xA6, 0xFC, 0x57, 0x11, 0x90, 0xFE, 0x61];

  for j=0 to 68
  { re[u128 j] = #x86_VPSHUFB_128(re[u128 j], bswap); }

  return re, counter;
}



fn check_result(
  stack u8[1088] r, // expected result / output
  reg u64 output,   // computed result / output
  reg u32 len       // length to check
) -> reg u64        // returns 0 if r[0..len[ == output[0..len[ or len otherwise
{
  reg u64 res, i;

  res = 0;
  i = 0;
  while(i < len)
  {
    if( r[(int)i] != (u8)[output + i])
    { res = (64u)len;
      i = (64u)len; }
    i += 1;
  }
  return res;
}



fn test_range(
  reg u64 output plain, // output and plain pointers
  reg u32 len,          // base length
  reg u64 key nonce,    // key and nonce pointers
  reg u32 counter,      // counter
  stack u8[1088] r,     // expected result
  stack u64[1088] sr,   // status of expected result (contains 0 if OK, test index otherwise)
  inline int offset     // offset : chacha20_avx will be tested beetween [len..(len+offset-1)]
) -> stack u64[1088]    // returns updated status of the tests
{
  reg u32 i;

  i = len;
  while(i < (len + offset)) // test from [len..(len+offset-1)]
  {
    chacha20_avx2(output, plain, i, key, nonce, counter);
    sr[(int)(i-1)] = check_result(r, output, i);
    i += 1;
  }

  return sr;
}



fn chacha20_avx2_ietf_test_vector_extended() -> reg u64[1088], reg u64
{
  inline int j;
  reg u64 i;
  reg u64 output plain key nonce;
  reg u32 len counter;
  stack u8[1088] r;
  stack u64[1088] sr;
  reg u64 ssr;

  // return variable initialization
  for j=0 to 1088 { sr[j] = 0; }
  ssr = 0;

  // memory setup
  output = 0x0;
  plain = 0x440;
  key = 0x880;
  nonce = 0x8A0;

  // test setup
  r, counter = chacha20_memory_init_ietf_test_extended(output, plain, key, nonce);
  
  // this part of the code tests all lengths (uncomment/comment if necessary)
  len = 1; // len should be >= 1; don't change the value to 0; 
  sr = test_range(output, plain, len, key, nonce, counter, r, sr, 114);
  len = 114;
  sr = test_range(output, plain, len, key, nonce, counter, r, sr, 974);

  // this part of the code tests a specific length
  /*  len = 515;*/
  /*  sr = test_range(output, plain, len, key, nonce, counter, r, sr, 1);*/

  // each sr value will contain a 0(OK) or the corresponding index (1..1088) if the test fails
  for j=0 to 1088 { ssr += sr[j]; }

  return sr, ssr;
}


// uncomment follow exec if you want to run the tests
/*
exec chacha20_avx2_ietf_test_vector_extended
(
  0x0:1088
, 0x440:1088
, 0x880:32
, 0x8A0:12
)
*/

