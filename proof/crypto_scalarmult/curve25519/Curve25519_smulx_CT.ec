require import List Int IntExtra IntDiv CoreMap.
from Jasmin require import JModel.

require import Array4 Array8 Array32.
require import WArray32 WArray64.



module M = {
  var leakages : leakages_t
  
  proc _fe64_add_rrs (f:W64.t Array4.t, g:W64.t Array4.t, z:W64.t) : 
  W64.t Array4.t = {
    var aux_0: bool;
    var aux_2: int;
    var aux_1: W64.t;
    var aux: W64.t Array4.t;
    
    var h:W64.t Array4.t;
    var cf:bool;
    var i:int;
    var  _0:bool;
    var  _1:bool;
    h <- witness;
    leakages <- LeakAddr([]) :: leakages;
    aux <- f;
    h <- aux;
    leakages <- LeakAddr([0; 0]) :: leakages;
    (aux_0, aux_1) <- addc_64 h.[0] g.[0] false;
    cf <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_1;
    leakages <- LeakFor(1,4) :: LeakAddr([]) :: leakages;
    i <- 1;
    while (i < 4) {
      leakages <- LeakAddr([i; i]) :: leakages;
      (aux_0, aux_1) <- addc_64 h.[i] g.[i] cf;
      cf <- aux_0;
      leakages <- LeakAddr([i]) :: leakages;
      h.[i] <- aux_1;
      i <- i + 1;
    }
    leakages <- LeakAddr([]) :: leakages;
    (aux_0, aux_1) <- subc_64 z z cf;
     _0 <- aux_0;
    z <- aux_1;
    leakages <- LeakAddr([]) :: leakages;
    aux_1 <- (z `&` (W64.of_int 38));
    z <- aux_1;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_0, aux_1) <- addc_64 h.[0] z false;
    cf <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_1;
    leakages <- LeakFor(1,4) :: LeakAddr([]) :: leakages;
    i <- 1;
    while (i < 4) {
      leakages <- LeakAddr([i]) :: leakages;
      (aux_0, aux_1) <- addc_64 h.[i] (W64.of_int 0) cf;
      cf <- aux_0;
      leakages <- LeakAddr([i]) :: leakages;
      h.[i] <- aux_1;
      i <- i + 1;
    }
    leakages <- LeakAddr([]) :: leakages;
    (aux_0, aux_1) <- subc_64 z z cf;
     _1 <- aux_0;
    z <- aux_1;
    leakages <- LeakAddr([]) :: leakages;
    aux_1 <- (z `&` (W64.of_int 38));
    z <- aux_1;
    leakages <- LeakAddr([0]) :: leakages;
    aux_1 <- (h.[0] + z);
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_1;
    return (h);
  }
  
  proc _fe64_add_sss (fs:W64.t Array4.t, gs:W64.t Array4.t) : W64.t Array4.t = {
    var aux_3: bool;
    var aux_2: bool;
    var aux_1: bool;
    var aux_0: bool;
    var aux: bool;
    var aux_4: W64.t;
    var aux_5: W64.t Array4.t;
    
    var hs:W64.t Array4.t;
    var z:W64.t;
    var f:W64.t Array4.t;
    var h:W64.t Array4.t;
    var  _0:bool;
    var  _1:bool;
    var  _2:bool;
    var  _3:bool;
    var  _4:bool;
    f <- witness;
    h <- witness;
    hs <- witness;
    leakages <- LeakAddr([]) :: leakages;
    (aux_3, aux_2, aux_1, aux_0, aux, aux_4) <- set0_64 ;
     _0 <- aux_3;
     _1 <- aux_2;
     _2 <- aux_1;
     _3 <- aux_0;
     _4 <- aux;
    z <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_5 <- fs;
    f <- aux_5;
    leakages <- LeakAddr([]) :: leakages;
    aux_5 <@ _fe64_add_rrs (f, gs, z);
    h <- aux_5;
    leakages <- LeakAddr([]) :: leakages;
    aux_5 <- h;
    hs <- aux_5;
    return (hs);
  }
  
  proc _fe64_add_ssr (fs:W64.t Array4.t, g:W64.t Array4.t) : W64.t Array4.t = {
    var aux_3: bool;
    var aux_2: bool;
    var aux_1: bool;
    var aux_0: bool;
    var aux: bool;
    var aux_4: W64.t;
    var aux_5: W64.t Array4.t;
    
    var hs:W64.t Array4.t;
    var z:W64.t;
    var h:W64.t Array4.t;
    var  _0:bool;
    var  _1:bool;
    var  _2:bool;
    var  _3:bool;
    var  _4:bool;
    h <- witness;
    hs <- witness;
    leakages <- LeakAddr([]) :: leakages;
    (aux_3, aux_2, aux_1, aux_0, aux, aux_4) <- set0_64 ;
     _0 <- aux_3;
     _1 <- aux_2;
     _2 <- aux_1;
     _3 <- aux_0;
     _4 <- aux;
    z <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_5 <@ _fe64_add_rrs (g, fs, z);
    h <- aux_5;
    leakages <- LeakAddr([]) :: leakages;
    aux_5 <- h;
    hs <- aux_5;
    return (hs);
  }
  
  proc _fe64_sub_rrs (f:W64.t Array4.t, g:W64.t Array4.t, z:W64.t) : 
  W64.t Array4.t = {
    var aux_0: bool;
    var aux_2: int;
    var aux_1: W64.t;
    var aux: W64.t Array4.t;
    
    var h:W64.t Array4.t;
    var cf:bool;
    var i:int;
    var  _0:bool;
    var  _1:bool;
    h <- witness;
    leakages <- LeakAddr([]) :: leakages;
    aux <- f;
    h <- aux;
    leakages <- LeakAddr([0; 0]) :: leakages;
    (aux_0, aux_1) <- subc_64 h.[0] g.[0] false;
    cf <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_1;
    leakages <- LeakFor(1,4) :: LeakAddr([]) :: leakages;
    i <- 1;
    while (i < 4) {
      leakages <- LeakAddr([i; i]) :: leakages;
      (aux_0, aux_1) <- subc_64 h.[i] g.[i] cf;
      cf <- aux_0;
      leakages <- LeakAddr([i]) :: leakages;
      h.[i] <- aux_1;
      i <- i + 1;
    }
    leakages <- LeakAddr([]) :: leakages;
    (aux_0, aux_1) <- subc_64 z z cf;
     _0 <- aux_0;
    z <- aux_1;
    leakages <- LeakAddr([]) :: leakages;
    aux_1 <- (z `&` (W64.of_int 38));
    z <- aux_1;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_0, aux_1) <- subc_64 h.[0] z false;
    cf <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_1;
    leakages <- LeakFor(1,4) :: LeakAddr([]) :: leakages;
    i <- 1;
    while (i < 4) {
      leakages <- LeakAddr([i]) :: leakages;
      (aux_0, aux_1) <- subc_64 h.[i] (W64.of_int 0) cf;
      cf <- aux_0;
      leakages <- LeakAddr([i]) :: leakages;
      h.[i] <- aux_1;
      i <- i + 1;
    }
    leakages <- LeakAddr([]) :: leakages;
    (aux_0, aux_1) <- subc_64 z z cf;
     _1 <- aux_0;
    z <- aux_1;
    leakages <- LeakAddr([]) :: leakages;
    aux_1 <- (z `&` (W64.of_int 38));
    z <- aux_1;
    leakages <- LeakAddr([0]) :: leakages;
    aux_1 <- (h.[0] - z);
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_1;
    return (h);
  }
  
  proc _fe64_sub_sss (fs:W64.t Array4.t, gs:W64.t Array4.t) : W64.t Array4.t = {
    var aux_3: bool;
    var aux_2: bool;
    var aux_1: bool;
    var aux_0: bool;
    var aux: bool;
    var aux_4: W64.t;
    var aux_5: W64.t Array4.t;
    
    var hs:W64.t Array4.t;
    var z:W64.t;
    var f:W64.t Array4.t;
    var h:W64.t Array4.t;
    var  _0:bool;
    var  _1:bool;
    var  _2:bool;
    var  _3:bool;
    var  _4:bool;
    f <- witness;
    h <- witness;
    hs <- witness;
    leakages <- LeakAddr([]) :: leakages;
    (aux_3, aux_2, aux_1, aux_0, aux, aux_4) <- set0_64 ;
     _0 <- aux_3;
     _1 <- aux_2;
     _2 <- aux_1;
     _3 <- aux_0;
     _4 <- aux;
    z <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_5 <- fs;
    f <- aux_5;
    leakages <- LeakAddr([]) :: leakages;
    aux_5 <@ _fe64_sub_rrs (f, gs, z);
    h <- aux_5;
    leakages <- LeakAddr([]) :: leakages;
    aux_5 <- h;
    hs <- aux_5;
    return (hs);
  }
  
  proc _fe64_sub_rsr (fs:W64.t Array4.t, g:W64.t Array4.t) : W64.t Array4.t = {
    var aux_3: bool;
    var aux_2: bool;
    var aux_1: bool;
    var aux_0: bool;
    var aux: bool;
    var aux_6: int;
    var aux_4: W64.t;
    var aux_5: W64.t Array4.t;
    
    var h:W64.t Array4.t;
    var z:W64.t;
    var cf:bool;
    var i:int;
    var  _0:bool;
    var  _1:bool;
    var  _2:bool;
    var  _3:bool;
    var  _4:bool;
    var  _5:bool;
    var  _6:bool;
    h <- witness;
    leakages <- LeakAddr([]) :: leakages;
    (aux_3, aux_2, aux_1, aux_0, aux, aux_4) <- set0_64 ;
     _0 <- aux_3;
     _1 <- aux_2;
     _2 <- aux_1;
     _3 <- aux_0;
     _4 <- aux;
    z <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_5 <- fs;
    h <- aux_5;
    leakages <- LeakAddr([0; 0]) :: leakages;
    (aux_3, aux_4) <- subc_64 h.[0] g.[0] false;
    cf <- aux_3;
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_4;
    leakages <- LeakFor(1,4) :: LeakAddr([]) :: leakages;
    i <- 1;
    while (i < 4) {
      leakages <- LeakAddr([i; i]) :: leakages;
      (aux_3, aux_4) <- subc_64 h.[i] g.[i] cf;
      cf <- aux_3;
      leakages <- LeakAddr([i]) :: leakages;
      h.[i] <- aux_4;
      i <- i + 1;
    }
    leakages <- LeakAddr([]) :: leakages;
    (aux_3, aux_4) <- subc_64 z z cf;
     _5 <- aux_3;
    z <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <- (z `&` (W64.of_int 38));
    z <- aux_4;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_3, aux_4) <- subc_64 h.[0] z false;
    cf <- aux_3;
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_4;
    leakages <- LeakFor(1,4) :: LeakAddr([]) :: leakages;
    i <- 1;
    while (i < 4) {
      leakages <- LeakAddr([i]) :: leakages;
      (aux_3, aux_4) <- subc_64 h.[i] (W64.of_int 0) cf;
      cf <- aux_3;
      leakages <- LeakAddr([i]) :: leakages;
      h.[i] <- aux_4;
      i <- i + 1;
    }
    leakages <- LeakAddr([]) :: leakages;
    (aux_3, aux_4) <- subc_64 z z cf;
     _6 <- aux_3;
    z <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <- (z `&` (W64.of_int 38));
    z <- aux_4;
    leakages <- LeakAddr([0]) :: leakages;
    aux_4 <- (h.[0] - z);
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_4;
    return (h);
  }
  
  proc _fe64_sub_ssr (fs:W64.t Array4.t, g:W64.t Array4.t) : W64.t Array4.t = {
    var aux: W64.t Array4.t;
    
    var hs:W64.t Array4.t;
    var h:W64.t Array4.t;
    h <- witness;
    hs <- witness;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_sub_rsr (fs, g);
    h <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- h;
    hs <- aux;
    return (hs);
  }
  
  proc _fe64_mul_a24 (f:W64.t Array4.t, a24:W64.t) : W64.t Array4.t = {
    var aux_5: bool;
    var aux_4: bool;
    var aux_3: bool;
    var aux_2: bool;
    var aux_1: bool;
    var aux_0: W64.t;
    var aux: W64.t;
    
    var h:W64.t Array4.t;
    var c:W64.t;
    var lo:W64.t;
    var cf:bool;
    var r0:W64.t;
    var  _0:bool;
    var  _1:bool;
    var  _2:bool;
    var  _3:bool;
    var  _4:bool;
    var  _5:bool;
    var  _6:bool;
    h <- witness;
    leakages <- LeakAddr([]) :: leakages;
    aux_0 <- a24;
    c <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 c f.[0];
    leakages <- LeakAddr([1]) :: leakages;
    h.[1] <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 c f.[1];
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_5, aux_0) <- addc_64 h.[1] lo false;
    cf <- aux_5;
    leakages <- LeakAddr([1]) :: leakages;
    h.[1] <- aux_0;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 c f.[2];
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_5, aux_0) <- addc_64 h.[2] lo cf;
    cf <- aux_5;
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 c f.[3];
    r0 <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_5, aux_0) <- addc_64 h.[3] lo cf;
    cf <- aux_5;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    (aux_5, aux_0) <- addc_64 r0 (W64.of_int 0) cf;
     _0 <- aux_5;
    r0 <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    (aux_5, aux_4, aux_3, aux_2, aux_1, aux_0) <- x86_IMULtimm_64 r0
    (W64.of_int 38);
     _1 <- aux_5;
     _2 <- aux_4;
     _3 <- aux_3;
     _4 <- aux_2;
     _5 <- aux_1;
    r0 <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_5, aux_0) <- addc_64 h.[0] r0 false;
    cf <- aux_5;
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_0;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_5, aux_0) <- addc_64 h.[1] (W64.of_int 0) cf;
    cf <- aux_5;
    leakages <- LeakAddr([1]) :: leakages;
    h.[1] <- aux_0;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_5, aux_0) <- addc_64 h.[2] (W64.of_int 0) cf;
    cf <- aux_5;
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_5, aux_0) <- addc_64 h.[3] (W64.of_int 0) cf;
    cf <- aux_5;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    (aux_5, aux_0) <- subc_64 c c cf;
     _6 <- aux_5;
    c <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    aux_0 <- (c `&` (W64.of_int 38));
    c <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    aux_0 <- (h.[0] + c);
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_0;
    return (h);
  }
  
  proc _fe64_mul_a24_ss (f:W64.t Array4.t, a24:W64.t) : W64.t Array4.t = {
    var aux: W64.t Array4.t;
    
    var hs:W64.t Array4.t;
    var h:W64.t Array4.t;
    h <- witness;
    hs <- witness;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_a24 (f, a24);
    h <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- h;
    hs <- aux;
    return (hs);
  }
  
  proc _fe64_reduce (h:W64.t Array4.t, r:W64.t Array4.t, _38:W64.t, z:W64.t,
                     cf:bool, of_0:bool) : W64.t Array4.t = {
    var aux_5: bool;
    var aux_4: bool;
    var aux_3: bool;
    var aux_2: bool;
    var aux_1: bool;
    var aux_0: W64.t;
    var aux: W64.t;
    
    var hi:W64.t;
    var lo:W64.t;
    var  _0:bool;
    var  _1:bool;
    var  _2:bool;
    var  _3:bool;
    var  _4:bool;
    var  _5:bool;
    
    leakages <- LeakAddr([0]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 _38 r.[0];
    hi <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_5, aux_0) <- x86_ADOX_64 h.[0] lo of_0;
    of_0 <- aux_5;
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_0;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_5, aux_0) <- x86_ADCX_64 h.[1] hi cf;
    cf <- aux_5;
    leakages <- LeakAddr([1]) :: leakages;
    h.[1] <- aux_0;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 _38 r.[1];
    hi <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_5, aux_0) <- x86_ADOX_64 h.[1] lo of_0;
    of_0 <- aux_5;
    leakages <- LeakAddr([1]) :: leakages;
    h.[1] <- aux_0;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_5, aux_0) <- x86_ADCX_64 h.[2] hi cf;
    cf <- aux_5;
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_0;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 _38 r.[2];
    hi <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_5, aux_0) <- x86_ADOX_64 h.[2] lo of_0;
    of_0 <- aux_5;
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_5, aux_0) <- x86_ADCX_64 h.[3] hi cf;
    cf <- aux_5;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 _38 r.[3];
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_5, aux_0) <- x86_ADOX_64 h.[3] lo of_0;
    of_0 <- aux_5;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_5, aux_0) <- x86_ADCX_64 r.[0] z cf;
    cf <- aux_5;
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_5, aux_0) <- x86_ADOX_64 r.[0] z of_0;
    of_0 <- aux_5;
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_5, aux_4, aux_3, aux_2, aux_1, aux_0) <- x86_IMULtimm_64 r.[0]
    (W64.of_int 38);
     _0 <- aux_5;
     _1 <- aux_4;
     _2 <- aux_3;
     _3 <- aux_2;
     _4 <- aux_1;
    lo <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_5, aux_0) <- addc_64 h.[0] lo false;
    cf <- aux_5;
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_0;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_5, aux_0) <- addc_64 h.[1] z cf;
    cf <- aux_5;
    leakages <- LeakAddr([1]) :: leakages;
    h.[1] <- aux_0;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_5, aux_0) <- addc_64 h.[2] z cf;
    cf <- aux_5;
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_5, aux_0) <- addc_64 h.[3] z cf;
    cf <- aux_5;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    (aux_5, aux_0) <- subc_64 z z cf;
     _5 <- aux_5;
    z <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    aux_0 <- (z `&` (W64.of_int 38));
    z <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    aux_0 <- (h.[0] + z);
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_0;
    return (h);
  }
  
  proc fe64_mul_c0 (f0:W64.t, g:W64.t Array4.t, z:W64.t, cf:bool, of_0:bool) : 
  W64.t Array4.t * W64.t Array4.t * bool * bool = {
    var aux_1: bool;
    var aux_0: W64.t;
    var aux: W64.t;
    
    var h:W64.t Array4.t;
    var r:W64.t Array4.t;
    var lo:W64.t;
    h <- witness;
    r <- witness;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f0 g.[0];
    leakages <- LeakAddr([1]) :: leakages;
    h.[1] <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f0 g.[1];
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 h.[1] lo cf;
    cf <- aux_1;
    leakages <- LeakAddr([1]) :: leakages;
    h.[1] <- aux_0;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f0 g.[2];
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 h.[2] lo cf;
    cf <- aux_1;
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f0 g.[3];
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 h.[3] lo cf;
    cf <- aux_1;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 r.[0] z cf;
    cf <- aux_1;
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_0;
    return (h, r, cf, of_0);
  }
  
  proc fe64_mul_c1 (h:W64.t Array4.t, r:W64.t Array4.t, f:W64.t,
                    g:W64.t Array4.t, z:W64.t, cf:bool, of_0:bool) : 
  W64.t Array4.t * W64.t Array4.t * bool * bool = {
    var aux_1: bool;
    var aux_0: W64.t;
    var aux: W64.t;
    
    var hi:W64.t;
    var lo:W64.t;
    
    leakages <- LeakAddr([0]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f g.[0];
    hi <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 h.[1] lo of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([1]) :: leakages;
    h.[1] <- aux_0;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 h.[2] hi cf;
    cf <- aux_1;
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_0;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f g.[1];
    hi <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 h.[2] lo of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 h.[3] hi cf;
    cf <- aux_1;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_0;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f g.[2];
    hi <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 h.[3] lo of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 r.[0] hi cf;
    cf <- aux_1;
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f g.[3];
    leakages <- LeakAddr([1]) :: leakages;
    r.[1] <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 r.[0] lo of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_0;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 r.[1] z cf;
    cf <- aux_1;
    leakages <- LeakAddr([1]) :: leakages;
    r.[1] <- aux_0;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 r.[1] z of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([1]) :: leakages;
    r.[1] <- aux_0;
    return (h, r, cf, of_0);
  }
  
  proc fe64_mul_c2 (h:W64.t Array4.t, r:W64.t Array4.t, f:W64.t,
                    g:W64.t Array4.t, z:W64.t, cf:bool, of_0:bool) : 
  W64.t Array4.t * W64.t Array4.t * bool * bool = {
    var aux_1: bool;
    var aux_0: W64.t;
    var aux: W64.t;
    
    var hi:W64.t;
    var lo:W64.t;
    
    leakages <- LeakAddr([0]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f g.[0];
    hi <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 h.[2] lo of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 h.[3] hi cf;
    cf <- aux_1;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_0;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f g.[1];
    hi <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 h.[3] lo of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 r.[0] hi cf;
    cf <- aux_1;
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_0;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f g.[2];
    hi <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 r.[0] lo of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_0;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 r.[1] hi cf;
    cf <- aux_1;
    leakages <- LeakAddr([1]) :: leakages;
    r.[1] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f g.[3];
    leakages <- LeakAddr([2]) :: leakages;
    r.[2] <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 r.[1] lo of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([1]) :: leakages;
    r.[1] <- aux_0;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 r.[2] z cf;
    cf <- aux_1;
    leakages <- LeakAddr([2]) :: leakages;
    r.[2] <- aux_0;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 r.[2] z of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([2]) :: leakages;
    r.[2] <- aux_0;
    return (h, r, cf, of_0);
  }
  
  proc fe64_mul_c3 (h:W64.t Array4.t, r:W64.t Array4.t, f:W64.t,
                    g:W64.t Array4.t, z:W64.t, cf:bool, of_0:bool) : 
  W64.t Array4.t * W64.t Array4.t * bool * bool = {
    var aux_1: bool;
    var aux_0: W64.t;
    var aux: W64.t;
    
    var hi:W64.t;
    var lo:W64.t;
    
    leakages <- LeakAddr([0]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f g.[0];
    hi <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 h.[3] lo of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_0;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 r.[0] hi cf;
    cf <- aux_1;
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_0;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f g.[1];
    hi <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 r.[0] lo of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_0;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 r.[1] hi cf;
    cf <- aux_1;
    leakages <- LeakAddr([1]) :: leakages;
    r.[1] <- aux_0;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f g.[2];
    hi <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 r.[1] lo of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([1]) :: leakages;
    r.[1] <- aux_0;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 r.[2] hi cf;
    cf <- aux_1;
    leakages <- LeakAddr([2]) :: leakages;
    r.[2] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_0, aux) <- x86_MULX_64 f g.[3];
    leakages <- LeakAddr([3]) :: leakages;
    r.[3] <- aux_0;
    lo <- aux;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 r.[2] lo of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([2]) :: leakages;
    r.[2] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_1, aux_0) <- x86_ADCX_64 r.[3] z cf;
    cf <- aux_1;
    leakages <- LeakAddr([3]) :: leakages;
    r.[3] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_1, aux_0) <- x86_ADOX_64 r.[3] z of_0;
    of_0 <- aux_1;
    leakages <- LeakAddr([3]) :: leakages;
    r.[3] <- aux_0;
    return (h, r, cf, of_0);
  }
  
  proc _fe64_mul_rsr (fs:W64.t Array4.t, g:W64.t Array4.t) : W64.t Array4.t = {
    var aux_3: bool;
    var aux_2: bool;
    var aux_1: bool;
    var aux_0: bool;
    var aux: bool;
    var aux_4: W64.t;
    var aux_6: W64.t Array4.t;
    var aux_5: W64.t Array4.t;
    
    var h:W64.t Array4.t;
    var of_0:bool;
    var cf:bool;
    var z:W64.t;
    var f:W64.t;
    var r:W64.t Array4.t;
    var _38:W64.t;
    var  _0:bool;
    var  _1:bool;
    var  _2:bool;
    h <- witness;
    r <- witness;
    leakages <- LeakAddr([]) :: leakages;
    (aux_3, aux_2, aux_1, aux_0, aux, aux_4) <- set0_64 ;
    of_0 <- aux_3;
    cf <- aux_2;
     _0 <- aux_1;
     _1 <- aux_0;
     _2 <- aux;
    z <- aux_4;
    leakages <- LeakAddr([0]) :: leakages;
    aux_4 <- fs.[0];
    f <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    (aux_6, aux_5, aux_3, aux_2) <@ fe64_mul_c0 (f, g, z, cf, of_0);
    h <- aux_6;
    r <- aux_5;
    cf <- aux_3;
    of_0 <- aux_2;
    leakages <- LeakAddr([1]) :: leakages;
    aux_4 <- fs.[1];
    f <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    (aux_6, aux_5, aux_3, aux_2) <@ fe64_mul_c1 (h, r, f, g, z, cf, of_0);
    h <- aux_6;
    r <- aux_5;
    cf <- aux_3;
    of_0 <- aux_2;
    leakages <- LeakAddr([2]) :: leakages;
    aux_4 <- fs.[2];
    f <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    (aux_6, aux_5, aux_3, aux_2) <@ fe64_mul_c2 (h, r, f, g, z, cf, of_0);
    h <- aux_6;
    r <- aux_5;
    cf <- aux_3;
    of_0 <- aux_2;
    leakages <- LeakAddr([3]) :: leakages;
    aux_4 <- fs.[3];
    f <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    (aux_6, aux_5, aux_3, aux_2) <@ fe64_mul_c3 (h, r, f, g, z, cf, of_0);
    h <- aux_6;
    r <- aux_5;
    cf <- aux_3;
    of_0 <- aux_2;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <- (W64.of_int 38);
    _38 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_6 <@ _fe64_reduce (h, r, _38, z, cf, of_0);
    h <- aux_6;
    return (h);
  }
  
  proc _fe64_mul_ssr (fs:W64.t Array4.t, g:W64.t Array4.t) : W64.t Array4.t = {
    var aux: W64.t Array4.t;
    
    var hs:W64.t Array4.t;
    var h:W64.t Array4.t;
    h <- witness;
    hs <- witness;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_rsr (fs, g);
    h <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- h;
    hs <- aux;
    return (hs);
  }
  
  proc _fe64_mul_sss (fs:W64.t Array4.t, gs:W64.t Array4.t) : W64.t Array4.t = {
    var aux: W64.t Array4.t;
    
    var hs:W64.t Array4.t;
    var g:W64.t Array4.t;
    var h:W64.t Array4.t;
    g <- witness;
    h <- witness;
    hs <- witness;
    leakages <- LeakAddr([]) :: leakages;
    aux <- gs;
    g <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_rsr (fs, g);
    h <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- h;
    hs <- aux;
    return (hs);
  }
  
  proc _fe64_mul_rss (fs:W64.t Array4.t, gs:W64.t Array4.t) : W64.t Array4.t = {
    var aux: W64.t Array4.t;
    
    var h:W64.t Array4.t;
    var g:W64.t Array4.t;
    g <- witness;
    h <- witness;
    leakages <- LeakAddr([]) :: leakages;
    aux <- gs;
    g <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_rsr (fs, g);
    h <- aux;
    return (h);
  }
  
  proc _fe64_sqr_rr (f:W64.t Array4.t) : W64.t Array4.t = {
    var aux_3: bool;
    var aux_2: bool;
    var aux_1: bool;
    var aux_0: bool;
    var aux: bool;
    var aux_5: W64.t;
    var aux_4: W64.t;
    var aux_6: W64.t Array4.t;
    
    var h:W64.t Array4.t;
    var of_0:bool;
    var cf:bool;
    var z:W64.t;
    var fx:W64.t;
    var t:W64.t Array8.t;
    var r:W64.t Array4.t;
    var _38:W64.t;
    var  _0:bool;
    var  _1:bool;
    var  _2:bool;
    h <- witness;
    r <- witness;
    t <- witness;
    leakages <- LeakAddr([]) :: leakages;
    (aux_3, aux_2, aux_1, aux_0, aux, aux_5) <- set0_64 ;
    of_0 <- aux_3;
    cf <- aux_2;
     _0 <- aux_1;
     _1 <- aux_0;
     _2 <- aux;
    z <- aux_5;
    leakages <- LeakAddr([0]) :: leakages;
    aux_5 <- f.[0];
    fx <- aux_5;
    leakages <- LeakAddr([]) :: leakages;
    (aux_5, aux_4) <- x86_MULX_64 fx fx;
    leakages <- LeakAddr([1]) :: leakages;
    t.[1] <- aux_5;
    leakages <- LeakAddr([0]) :: leakages;
    h.[0] <- aux_4;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_5, aux_4) <- x86_MULX_64 fx f.[1];
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_5;
    leakages <- LeakAddr([1]) :: leakages;
    h.[1] <- aux_4;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_5, aux_4) <- x86_MULX_64 fx f.[2];
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_5;
    leakages <- LeakAddr([2]) :: leakages;
    t.[2] <- aux_4;
    leakages <- LeakAddr([2; 2]) :: leakages;
    (aux_3, aux_5) <- x86_ADCX_64 h.[2] t.[2] cf;
    cf <- aux_3;
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_5;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_5, aux_4) <- x86_MULX_64 fx f.[3];
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_5;
    leakages <- LeakAddr([3]) :: leakages;
    t.[3] <- aux_4;
    leakages <- LeakAddr([3; 3]) :: leakages;
    (aux_3, aux_5) <- x86_ADCX_64 h.[3] t.[3] cf;
    cf <- aux_3;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_5;
    leakages <- LeakAddr([1]) :: leakages;
    aux_5 <- f.[1];
    fx <- aux_5;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_5, aux_4) <- x86_MULX_64 fx f.[2];
    leakages <- LeakAddr([4]) :: leakages;
    t.[4] <- aux_5;
    leakages <- LeakAddr([3]) :: leakages;
    t.[3] <- aux_4;
    leakages <- LeakAddr([3; 3]) :: leakages;
    (aux_3, aux_5) <- x86_ADOX_64 h.[3] t.[3] of_0;
    of_0 <- aux_3;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_5;
    leakages <- LeakAddr([4; 0]) :: leakages;
    (aux_3, aux_5) <- x86_ADCX_64 r.[0] t.[4] cf;
    cf <- aux_3;
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_5;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_5, aux_4) <- x86_MULX_64 fx f.[3];
    leakages <- LeakAddr([1]) :: leakages;
    r.[1] <- aux_5;
    leakages <- LeakAddr([4]) :: leakages;
    t.[4] <- aux_4;
    leakages <- LeakAddr([4; 0]) :: leakages;
    (aux_3, aux_5) <- x86_ADOX_64 r.[0] t.[4] of_0;
    of_0 <- aux_3;
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_5;
    leakages <- LeakAddr([]) :: leakages;
    (aux_5, aux_4) <- x86_MULX_64 fx fx;
    leakages <- LeakAddr([3]) :: leakages;
    t.[3] <- aux_5;
    leakages <- LeakAddr([2]) :: leakages;
    t.[2] <- aux_4;
    leakages <- LeakAddr([2]) :: leakages;
    aux_5 <- f.[2];
    fx <- aux_5;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_5, aux_4) <- x86_MULX_64 fx f.[3];
    leakages <- LeakAddr([2]) :: leakages;
    r.[2] <- aux_5;
    leakages <- LeakAddr([5]) :: leakages;
    t.[5] <- aux_4;
    leakages <- LeakAddr([5; 1]) :: leakages;
    (aux_3, aux_5) <- x86_ADCX_64 r.[1] t.[5] cf;
    cf <- aux_3;
    leakages <- LeakAddr([1]) :: leakages;
    r.[1] <- aux_5;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_3, aux_5) <- x86_ADOX_64 r.[1] z of_0;
    of_0 <- aux_3;
    leakages <- LeakAddr([1]) :: leakages;
    r.[1] <- aux_5;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_3, aux_5) <- x86_ADCX_64 r.[2] z cf;
    cf <- aux_3;
    leakages <- LeakAddr([2]) :: leakages;
    r.[2] <- aux_5;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_3, aux_5) <- x86_ADOX_64 r.[2] z of_0;
    of_0 <- aux_3;
    leakages <- LeakAddr([2]) :: leakages;
    r.[2] <- aux_5;
    leakages <- LeakAddr([]) :: leakages;
    (aux_5, aux_4) <- x86_MULX_64 fx fx;
    leakages <- LeakAddr([5]) :: leakages;
    t.[5] <- aux_5;
    leakages <- LeakAddr([4]) :: leakages;
    t.[4] <- aux_4;
    leakages <- LeakAddr([3]) :: leakages;
    aux_5 <- f.[3];
    fx <- aux_5;
    leakages <- LeakAddr([]) :: leakages;
    (aux_5, aux_4) <- x86_MULX_64 fx fx;
    leakages <- LeakAddr([3]) :: leakages;
    r.[3] <- aux_5;
    leakages <- LeakAddr([6]) :: leakages;
    t.[6] <- aux_4;
    leakages <- LeakAddr([1; 1]) :: leakages;
    (aux_3, aux_5) <- x86_ADCX_64 h.[1] h.[1] cf;
    cf <- aux_3;
    leakages <- LeakAddr([1]) :: leakages;
    h.[1] <- aux_5;
    leakages <- LeakAddr([1; 1]) :: leakages;
    (aux_3, aux_5) <- x86_ADOX_64 h.[1] t.[1] of_0;
    of_0 <- aux_3;
    leakages <- LeakAddr([1]) :: leakages;
    h.[1] <- aux_5;
    leakages <- LeakAddr([2; 2]) :: leakages;
    (aux_3, aux_5) <- x86_ADCX_64 h.[2] h.[2] cf;
    cf <- aux_3;
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_5;
    leakages <- LeakAddr([2; 2]) :: leakages;
    (aux_3, aux_5) <- x86_ADOX_64 h.[2] t.[2] of_0;
    of_0 <- aux_3;
    leakages <- LeakAddr([2]) :: leakages;
    h.[2] <- aux_5;
    leakages <- LeakAddr([3; 3]) :: leakages;
    (aux_3, aux_5) <- x86_ADCX_64 h.[3] h.[3] cf;
    cf <- aux_3;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_5;
    leakages <- LeakAddr([3; 3]) :: leakages;
    (aux_3, aux_5) <- x86_ADOX_64 h.[3] t.[3] of_0;
    of_0 <- aux_3;
    leakages <- LeakAddr([3]) :: leakages;
    h.[3] <- aux_5;
    leakages <- LeakAddr([0; 0]) :: leakages;
    (aux_3, aux_5) <- x86_ADCX_64 r.[0] r.[0] cf;
    cf <- aux_3;
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_5;
    leakages <- LeakAddr([4; 0]) :: leakages;
    (aux_3, aux_5) <- x86_ADOX_64 r.[0] t.[4] of_0;
    of_0 <- aux_3;
    leakages <- LeakAddr([0]) :: leakages;
    r.[0] <- aux_5;
    leakages <- LeakAddr([1; 1]) :: leakages;
    (aux_3, aux_5) <- x86_ADCX_64 r.[1] r.[1] cf;
    cf <- aux_3;
    leakages <- LeakAddr([1]) :: leakages;
    r.[1] <- aux_5;
    leakages <- LeakAddr([5; 1]) :: leakages;
    (aux_3, aux_5) <- x86_ADOX_64 r.[1] t.[5] of_0;
    of_0 <- aux_3;
    leakages <- LeakAddr([1]) :: leakages;
    r.[1] <- aux_5;
    leakages <- LeakAddr([2; 2]) :: leakages;
    (aux_3, aux_5) <- x86_ADCX_64 r.[2] r.[2] cf;
    cf <- aux_3;
    leakages <- LeakAddr([2]) :: leakages;
    r.[2] <- aux_5;
    leakages <- LeakAddr([6; 2]) :: leakages;
    (aux_3, aux_5) <- x86_ADOX_64 r.[2] t.[6] of_0;
    of_0 <- aux_3;
    leakages <- LeakAddr([2]) :: leakages;
    r.[2] <- aux_5;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_3, aux_5) <- x86_ADCX_64 r.[3] z cf;
    cf <- aux_3;
    leakages <- LeakAddr([3]) :: leakages;
    r.[3] <- aux_5;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_3, aux_5) <- x86_ADOX_64 r.[3] z of_0;
    of_0 <- aux_3;
    leakages <- LeakAddr([3]) :: leakages;
    r.[3] <- aux_5;
    leakages <- LeakAddr([]) :: leakages;
    aux_5 <- (W64.of_int 38);
    _38 <- aux_5;
    leakages <- LeakAddr([]) :: leakages;
    aux_6 <@ _fe64_reduce (h, r, _38, z, cf, of_0);
    h <- aux_6;
    return (h);
  }
  
  proc _fe64_it_sqr (i:W64.t, f:W64.t Array4.t) : W64.t * W64.t Array4.t = {
    var aux_3: bool;
    var aux_2: bool;
    var aux_1: bool;
    var aux_0: bool;
    var aux_4: W64.t;
    var aux: W64.t Array4.t;
    
    var zf:bool;
    var h:W64.t Array4.t;
    var  _0:bool;
    var  _1:bool;
    var  _2:bool;
    var  _3:bool;
    var  _4:bool;
    var  _5:bool;
    var  _6:bool;
    h <- witness;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_sqr_rr (f);
    h <- aux;
    leakages <- LeakAddr([]) :: leakages;
    (aux_3, aux_2, aux_1, aux_0, aux_4) <- x86_DEC_64 i;
     _0 <- aux_3;
     _1 <- aux_2;
     _2 <- aux_1;
     _3 <- aux_0;
    i <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_sqr_rr (h);
    f <- aux;
    leakages <- LeakAddr([]) :: leakages;
    (aux_3, aux_2, aux_1, aux_0, aux_4) <- x86_DEC_64 i;
     _4 <- aux_3;
     _5 <- aux_2;
     _6 <- aux_1;
    zf <- aux_0;
    i <- aux_4;
    leakages <- LeakCond((! zf)) :: LeakAddr([]) :: leakages;
    
    while ((! zf)) {
      leakages <- LeakAddr([]) :: leakages;
      aux <@ _fe64_sqr_rr (f);
      h <- aux;
      leakages <- LeakAddr([]) :: leakages;
      (aux_3, aux_2, aux_1, aux_0, aux_4) <- x86_DEC_64 i;
       _0 <- aux_3;
       _1 <- aux_2;
       _2 <- aux_1;
       _3 <- aux_0;
      i <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux <@ _fe64_sqr_rr (h);
      f <- aux;
      leakages <- LeakAddr([]) :: leakages;
      (aux_3, aux_2, aux_1, aux_0, aux_4) <- x86_DEC_64 i;
       _4 <- aux_3;
       _5 <- aux_2;
       _6 <- aux_1;
      zf <- aux_0;
      i <- aux_4;
    leakages <- LeakCond((! zf)) :: LeakAddr([]) :: leakages;
    
    }
    return (i, f);
  }
  
  proc _fe64_sqr_ss (fs:W64.t Array4.t) : W64.t Array4.t = {
    var aux: W64.t Array4.t;
    
    var hs:W64.t Array4.t;
    var f:W64.t Array4.t;
    var h:W64.t Array4.t;
    f <- witness;
    h <- witness;
    hs <- witness;
    leakages <- LeakAddr([]) :: leakages;
    aux <- fs;
    f <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_sqr_rr (f);
    h <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- h;
    hs <- aux;
    return (hs);
  }
  
  proc _fe64_invert (f:W64.t Array4.t) : W64.t Array4.t = {
    var aux_0: W64.t;
    var aux: W64.t Array4.t;
    
    var t1:W64.t Array4.t;
    var fs:W64.t Array4.t;
    var t0:W64.t Array4.t;
    var t0s:W64.t Array4.t;
    var t1s:W64.t Array4.t;
    var t2:W64.t Array4.t;
    var i:W64.t;
    var t2s:W64.t Array4.t;
    var t3:W64.t Array4.t;
    fs <- witness;
    t0 <- witness;
    t0s <- witness;
    t1 <- witness;
    t1s <- witness;
    t2 <- witness;
    t2s <- witness;
    t3 <- witness;
    leakages <- LeakAddr([]) :: leakages;
    aux <- f;
    fs <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_sqr_rr (f);
    t0 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- t0;
    t0s <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_sqr_rr (t0);
    t1 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_sqr_rr (t1);
    t1 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_rsr (fs, t1);
    t1 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- t1;
    t1s <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_rsr (t0s, t1);
    t0 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- t0;
    t0s <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_sqr_rr (t0);
    t2 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_rsr (t1s, t2);
    t1 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- t1;
    t1s <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_sqr_rr (t1);
    t2 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux_0 <- (W64.of_int 4);
    i <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    (aux_0, aux) <@ _fe64_it_sqr (i, t2);
    i <- aux_0;
    t2 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- t2;
    t2s <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_rsr (t1s, t2);
    t1 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- t1;
    t1s <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux_0 <- (W64.of_int 10);
    i <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    (aux_0, aux) <@ _fe64_it_sqr (i, t1);
    i <- aux_0;
    t2 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_rsr (t1s, t2);
    t2 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- t2;
    t2s <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux_0 <- (W64.of_int 20);
    i <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    (aux_0, aux) <@ _fe64_it_sqr (i, t2);
    i <- aux_0;
    t3 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_rsr (t2s, t3);
    t2 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux_0 <- (W64.of_int 10);
    i <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    (aux_0, aux) <@ _fe64_it_sqr (i, t2);
    i <- aux_0;
    t2 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_rsr (t1s, t2);
    t1 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- t1;
    t1s <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux_0 <- (W64.of_int 50);
    i <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    (aux_0, aux) <@ _fe64_it_sqr (i, t1);
    i <- aux_0;
    t2 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_rsr (t1s, t2);
    t2 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- t2;
    t2s <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux_0 <- (W64.of_int 100);
    i <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    (aux_0, aux) <@ _fe64_it_sqr (i, t2);
    i <- aux_0;
    t3 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_rsr (t2s, t3);
    t2 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux_0 <- (W64.of_int 50);
    i <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    (aux_0, aux) <@ _fe64_it_sqr (i, t2);
    i <- aux_0;
    t2 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_rsr (t1s, t2);
    t1 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux_0 <- (W64.of_int 4);
    i <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    (aux_0, aux) <@ _fe64_it_sqr (i, t1);
    i <- aux_0;
    t1 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_sqr_rr (t1);
    t1 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _fe64_mul_rsr (t0s, t1);
    t1 <- aux;
    return (t1);
  }
  
  proc _fe64_tobytes (f:W64.t Array4.t) : W64.t Array4.t = {
    var aux_4: bool;
    var aux_3: bool;
    var aux_2: bool;
    var aux_1: bool;
    var aux_0: bool;
    var aux: W64.t;
    
    var t:W64.t;
    var cf:bool;
    var  _0:bool;
    var  _1:bool;
    var  _2:bool;
    var  _3:bool;
    var  _4:bool;
    var  _5:bool;
    var  _6:bool;
    var  _7:bool;
    var  _8:bool;
    var  _9:bool;
    
    leakages <- LeakAddr([3; 3]) :: leakages;
    aux <- (f.[3] + f.[3]);
    t <- aux;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_4, aux_3, aux_2, aux_1, aux_0, aux) <- x86_SAR_64 f.[3]
    (W8.of_int 63);
     _0 <- aux_4;
     _1 <- aux_3;
     _2 <- aux_2;
     _3 <- aux_1;
     _4 <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    f.[3] <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- (t `>>` (W8.of_int 1));
    t <- aux;
    leakages <- LeakAddr([3]) :: leakages;
    aux <- (f.[3] `&` (W64.of_int 19));
    leakages <- LeakAddr([3]) :: leakages;
    f.[3] <- aux;
    leakages <- LeakAddr([3]) :: leakages;
    aux <- (f.[3] + (W64.of_int 19));
    leakages <- LeakAddr([3]) :: leakages;
    f.[3] <- aux;
    leakages <- LeakAddr([3; 0]) :: leakages;
    (aux_4, aux) <- addc_64 f.[0] f.[3] false;
    cf <- aux_4;
    leakages <- LeakAddr([0]) :: leakages;
    f.[0] <- aux;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_4, aux) <- addc_64 f.[1] (W64.of_int 0) cf;
    cf <- aux_4;
    leakages <- LeakAddr([1]) :: leakages;
    f.[1] <- aux;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_4, aux) <- addc_64 f.[2] (W64.of_int 0) cf;
    cf <- aux_4;
    leakages <- LeakAddr([2]) :: leakages;
    f.[2] <- aux;
    leakages <- LeakAddr([]) :: leakages;
    (aux_4, aux) <- addc_64 t (W64.of_int 0) cf;
    cf <- aux_4;
    t <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- (t + t);
    leakages <- LeakAddr([3]) :: leakages;
    f.[3] <- aux;
    leakages <- LeakAddr([]) :: leakages;
    (aux_4, aux_3, aux_2, aux_1, aux_0, aux) <- x86_SAR_64 t (W8.of_int 63);
     _5 <- aux_4;
     _6 <- aux_3;
     _7 <- aux_2;
     _8 <- aux_1;
     _9 <- aux_0;
    t <- aux;
    leakages <- LeakAddr([3]) :: leakages;
    aux <- (f.[3] `>>` (W8.of_int 1));
    leakages <- LeakAddr([3]) :: leakages;
    f.[3] <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- (invw t);
    t <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- (t `&` (W64.of_int 19));
    t <- aux;
    leakages <- LeakAddr([0]) :: leakages;
    (aux_4, aux) <- subc_64 f.[0] t false;
    cf <- aux_4;
    leakages <- LeakAddr([0]) :: leakages;
    f.[0] <- aux;
    leakages <- LeakAddr([1]) :: leakages;
    (aux_4, aux) <- subc_64 f.[1] (W64.of_int 0) cf;
    cf <- aux_4;
    leakages <- LeakAddr([1]) :: leakages;
    f.[1] <- aux;
    leakages <- LeakAddr([2]) :: leakages;
    (aux_4, aux) <- subc_64 f.[2] (W64.of_int 0) cf;
    cf <- aux_4;
    leakages <- LeakAddr([2]) :: leakages;
    f.[2] <- aux;
    leakages <- LeakAddr([3]) :: leakages;
    (aux_4, aux) <- subc_64 f.[3] (W64.of_int 0) cf;
    cf <- aux_4;
    leakages <- LeakAddr([3]) :: leakages;
    f.[3] <- aux;
    return (f);
  }
  
  proc _fe64_frombytes (_f:W64.t) : W64.t Array4.t * W64.t Array4.t = {
    var aux: int;
    var aux_0: W64.t;
    
    var f1s:W64.t Array4.t;
    var f2s:W64.t Array4.t;
    var i:int;
    var f:W64.t Array4.t;
    f <- witness;
    f1s <- witness;
    f2s <- witness;
    leakages <- LeakFor(0,3) :: LeakAddr([]) :: leakages;
    i <- 0;
    while (i < 3) {
      leakages <- LeakAddr([(W64.to_uint (_f + (W64.of_int (8 * i))))]) :: leakages;
      aux_0 <- (loadW64 Glob.mem (W64.to_uint (_f + (W64.of_int (8 * i)))));
      leakages <- LeakAddr([i]) :: leakages;
      f.[i] <- aux_0;
      leakages <- LeakAddr([i]) :: leakages;
      aux_0 <- f.[i];
      leakages <- LeakAddr([i]) :: leakages;
      f1s.[i] <- aux_0;
      leakages <- LeakAddr([i]) :: leakages;
      aux_0 <- f.[i];
      leakages <- LeakAddr([i]) :: leakages;
      f2s.[i] <- aux_0;
      i <- i + 1;
    }
    leakages <- LeakAddr([(W64.to_uint (_f + (W64.of_int (8 * 3))))]) :: leakages;
    aux_0 <- (loadW64 Glob.mem (W64.to_uint (_f + (W64.of_int (8 * 3)))));
    leakages <- LeakAddr([3]) :: leakages;
    f.[3] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    aux_0 <- (f.[3] `&` (W64.of_int 9223372036854775807));
    leakages <- LeakAddr([3]) :: leakages;
    f.[3] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    aux_0 <- f.[3];
    leakages <- LeakAddr([3]) :: leakages;
    f1s.[3] <- aux_0;
    leakages <- LeakAddr([3]) :: leakages;
    aux_0 <- f.[3];
    leakages <- LeakAddr([3]) :: leakages;
    f2s.[3] <- aux_0;
    return (f1s, f2s);
  }
  
  proc _fe64_cswap_ssss (xs:W64.t Array4.t, ys:W64.t Array4.t, swap_0:W64.t) : 
  W64.t Array4.t * W64.t Array4.t = {
    var aux_1: int;
    var aux_0: W64.t;
    var aux: W64.t Array4.t;
    
    var x:W64.t Array4.t;
    var mask:W64.t;
    var i:int;
    var y:W64.t Array4.t;
    var t:W64.t;
    x <- witness;
    y <- witness;
    leakages <- LeakAddr([]) :: leakages;
    aux <- xs;
    x <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux_0 <- (W64.of_int 0);
    mask <- aux_0;
    leakages <- LeakAddr([]) :: leakages;
    aux_0 <- (mask - swap_0);
    mask <- aux_0;
    leakages <- LeakFor(0,4) :: LeakAddr([]) :: leakages;
    i <- 0;
    while (i < 4) {
      leakages <- LeakAddr([i]) :: leakages;
      aux_0 <- ys.[i];
      leakages <- LeakAddr([i]) :: leakages;
      y.[i] <- aux_0;
      leakages <- LeakAddr([i]) :: leakages;
      aux_0 <- x.[i];
      t <- aux_0;
      leakages <- LeakAddr([i]) :: leakages;
      aux_0 <- (t `^` y.[i]);
      t <- aux_0;
      leakages <- LeakAddr([]) :: leakages;
      aux_0 <- (t `&` mask);
      t <- aux_0;
      leakages <- LeakAddr([i]) :: leakages;
      aux_0 <- (x.[i] `^` t);
      leakages <- LeakAddr([i]) :: leakages;
      x.[i] <- aux_0;
      leakages <- LeakAddr([i]) :: leakages;
      aux_0 <- (y.[i] `^` t);
      leakages <- LeakAddr([i]) :: leakages;
      y.[i] <- aux_0;
      leakages <- LeakAddr([i]) :: leakages;
      aux_0 <- y.[i];
      leakages <- LeakAddr([i]) :: leakages;
      ys.[i] <- aux_0;
      i <- i + 1;
    }
    leakages <- LeakAddr([]) :: leakages;
    aux <- x;
    xs <- aux;
    return (xs, ys);
  }
  
  proc _fe64_cswap_rsrs (x:W64.t Array4.t, ys:W64.t Array4.t, swap_0:W64.t) : 
  W64.t Array4.t * W64.t Array4.t = {
    var aux_0: int;
    var aux: W64.t;
    
    var mask:W64.t;
    var i:int;
    var y:W64.t Array4.t;
    var t:W64.t;
    y <- witness;
    leakages <- LeakAddr([]) :: leakages;
    aux <- (W64.of_int 0);
    mask <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- (mask - swap_0);
    mask <- aux;
    leakages <- LeakFor(0,4) :: LeakAddr([]) :: leakages;
    i <- 0;
    while (i < 4) {
      leakages <- LeakAddr([i]) :: leakages;
      aux <- ys.[i];
      leakages <- LeakAddr([i]) :: leakages;
      y.[i] <- aux;
      leakages <- LeakAddr([i]) :: leakages;
      aux <- x.[i];
      t <- aux;
      leakages <- LeakAddr([i]) :: leakages;
      aux <- (t `^` y.[i]);
      t <- aux;
      leakages <- LeakAddr([]) :: leakages;
      aux <- (t `&` mask);
      t <- aux;
      leakages <- LeakAddr([i]) :: leakages;
      aux <- (x.[i] `^` t);
      leakages <- LeakAddr([i]) :: leakages;
      x.[i] <- aux;
      leakages <- LeakAddr([i]) :: leakages;
      aux <- (y.[i] `^` t);
      leakages <- LeakAddr([i]) :: leakages;
      y.[i] <- aux;
      leakages <- LeakAddr([i]) :: leakages;
      aux <- y.[i];
      leakages <- LeakAddr([i]) :: leakages;
      ys.[i] <- aux;
      i <- i + 1;
    }
    return (x, ys);
  }
  
  proc _fe64_0_1_x2 () : W64.t Array4.t * W64.t Array4.t * W64.t Array4.t = {
    var aux_3: bool;
    var aux_2: bool;
    var aux_1: bool;
    var aux_0: bool;
    var aux: bool;
    var aux_5: int;
    var aux_4: W64.t;
    
    var f1s:W64.t Array4.t;
    var f2s:W64.t Array4.t;
    var f3s:W64.t Array4.t;
    var z:W64.t;
    var i:int;
    var  _0:bool;
    var  _1:bool;
    var  _2:bool;
    var  _3:bool;
    var  _4:bool;
    f1s <- witness;
    f2s <- witness;
    f3s <- witness;
    leakages <- LeakAddr([]) :: leakages;
    (aux_3, aux_2, aux_1, aux_0, aux, aux_4) <- set0_64 ;
     _0 <- aux_3;
     _1 <- aux_2;
     _2 <- aux_1;
     _3 <- aux_0;
     _4 <- aux;
    z <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <- z;
    leakages <- LeakAddr([0]) :: leakages;
    f1s.[0] <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <- (W64.of_int 1);
    leakages <- LeakAddr([0]) :: leakages;
    f2s.[0] <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <- (W64.of_int 1);
    leakages <- LeakAddr([0]) :: leakages;
    f3s.[0] <- aux_4;
    leakages <- LeakFor(1,4) :: LeakAddr([]) :: leakages;
    i <- 1;
    while (i < 4) {
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <- z;
      leakages <- LeakAddr([i]) :: leakages;
      f1s.[i] <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <- z;
      leakages <- LeakAddr([i]) :: leakages;
      f2s.[i] <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <- z;
      leakages <- LeakAddr([i]) :: leakages;
      f3s.[i] <- aux_4;
      i <- i + 1;
    }
    return (f1s, f2s, f3s);
  }
  
  proc _bit_select (e:W8.t Array32.t, pos:W64.t) : W64.t = {
    var aux: W64.t;
    
    var b:W64.t;
    var p:W64.t;
    
    leakages <- LeakAddr([]) :: leakages;
    aux <- pos;
    p <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- (p `>>` (W8.of_int 3));
    p <- aux;
    leakages <- LeakAddr([(W64.to_uint p)]) :: leakages;
    aux <- (zeroextu64 e.[(W64.to_uint p)]);
    b <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- pos;
    p <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- (p `&` (W64.of_int 7));
    p <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- (b `>>` (truncateu8 p));
    b <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- (b `&` (W64.of_int 1));
    b <- aux;
    return (b);
  }
  
  proc _x25519_scalarmult (out:W64.t, scalar:W64.t, point:W64.t) : unit = {
    var aux_0: int;
    var aux_1: W8.t;
    var aux: W64.t;
    var aux_4: W64.t Array4.t;
    var aux_3: W64.t Array4.t;
    var aux_2: W64.t Array4.t;
    
    var outs:W64.t;
    var i:int;
    var t:W64.t;
    var e:W8.t Array32.t;
    var x3:W64.t Array4.t;
    var x1:W64.t Array4.t;
    var z2r:W64.t Array4.t;
    var z3:W64.t Array4.t;
    var x2:W64.t Array4.t;
    var pos:W64.t;
    var swaps:W64.t;
    var poss:W64.t;
    var swap_0:W64.t;
    var b:W64.t;
    var z2:W64.t Array4.t;
    var t0:W64.t Array4.t;
    var t1:W64.t Array4.t;
    var t2:W64.t Array4.t;
    var t1r:W64.t Array4.t;
    var x2r:W64.t Array4.t;
    e <- witness;
    t0 <- witness;
    t1 <- witness;
    t1r <- witness;
    t2 <- witness;
    x1 <- witness;
    x2 <- witness;
    x2r <- witness;
    x3 <- witness;
    z2 <- witness;
    z2r <- witness;
    z3 <- witness;
    leakages <- LeakAddr([]) :: leakages;
    aux <- out;
    outs <- aux;
    leakages <- LeakFor(0,4) :: LeakAddr([]) :: leakages;
    i <- 0;
    while (i < 4) {
      leakages <- LeakAddr([(W64.to_uint (scalar + (W64.of_int (8 * i))))]) :: leakages;
      aux <- (loadW64 Glob.mem (W64.to_uint (scalar + (W64.of_int (8 * i)))));
      t <- aux;
      leakages <- LeakAddr([]) :: leakages;
      aux <- t;
      leakages <- LeakAddr([i]) :: leakages;
      e =
      Array32.init
      (WArray32.get8 (WArray32.set64 (WArray32.init8 (fun i => e.[i])) i aux));
      i <- i + 1;
    }
    leakages <- LeakAddr([0]) :: leakages;
    aux_1 <- (e.[0] `&` (W8.of_int 248));
    leakages <- LeakAddr([0]) :: leakages;
    e.[0] <- aux_1;
    leakages <- LeakAddr([31]) :: leakages;
    aux_1 <- (e.[31] `&` (W8.of_int 127));
    leakages <- LeakAddr([31]) :: leakages;
    e.[31] <- aux_1;
    leakages <- LeakAddr([31]) :: leakages;
    aux_1 <- (e.[31] `|` (W8.of_int 64));
    leakages <- LeakAddr([31]) :: leakages;
    e.[31] <- aux_1;
    leakages <- LeakAddr([]) :: leakages;
    (aux_4, aux_3) <@ _fe64_frombytes (point);
    x3 <- aux_4;
    x1 <- aux_3;
    leakages <- LeakAddr([]) :: leakages;
    (aux_4, aux_3, aux_2) <@ _fe64_0_1_x2 ();
    z2r <- aux_4;
    z3 <- aux_3;
    x2 <- aux_2;
    leakages <- LeakAddr([]) :: leakages;
    aux <- (W64.of_int 254);
    pos <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- (W64.of_int 0);
    swaps <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- pos;
    poss <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- swaps;
    swap_0 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <@ _bit_select (e, pos);
    b <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- (swap_0 `^` b);
    swap_0 <- aux;
    leakages <- LeakAddr([]) :: leakages;
    (aux_4, aux_3) <@ _fe64_cswap_ssss (x2, x3, swap_0);
    x2 <- aux_4;
    x3 <- aux_3;
    leakages <- LeakAddr([]) :: leakages;
    (aux_4, aux_3) <@ _fe64_cswap_rsrs (z2r, z3, swap_0);
    z2r <- aux_4;
    z3 <- aux_3;
    leakages <- LeakAddr([]) :: leakages;
    aux <- b;
    swaps <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <- z2r;
    z2 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_sub_ssr (x2, z2r);
    t0 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_add_ssr (x2, z2r);
    x2 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_sub_sss (x3, z3);
    t1 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_add_sss (x3, z3);
    z2 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_mul_sss (x2, t1);
    z3 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_mul_sss (z2, t0);
    z2 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_sqr_ss (x2);
    t2 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_sqr_ss (t0);
    t1r <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <- t1r;
    t1 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_add_sss (z3, z2);
    x3 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_sub_sss (z3, z2);
    z2 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_mul_ssr (t2, t1r);
    x2 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_sub_ssr (t2, t1r);
    t0 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_sqr_ss (z2);
    z2 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_mul_a24_ss (t0, (W64.of_int 121665));
    z3 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_sqr_ss (x3);
    x3 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_add_sss (t2, z3);
    t2 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_mul_sss (x1, z2);
    z3 <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_mul_rss (t0, t2);
    z2r <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux <- poss;
    pos <- aux;
    leakages <- LeakAddr([]) :: leakages;
    aux <- (pos - (W64.of_int 1));
    pos <- aux;
    leakages <- LeakCond(((W64.of_int 0) \sle pos)) :: LeakAddr([]) :: leakages;
    
    while (((W64.of_int 0) \sle pos)) {
      leakages <- LeakAddr([]) :: leakages;
      aux <- pos;
      poss <- aux;
      leakages <- LeakAddr([]) :: leakages;
      aux <- swaps;
      swap_0 <- aux;
      leakages <- LeakAddr([]) :: leakages;
      aux <@ _bit_select (e, pos);
      b <- aux;
      leakages <- LeakAddr([]) :: leakages;
      aux <- (swap_0 `^` b);
      swap_0 <- aux;
      leakages <- LeakAddr([]) :: leakages;
      (aux_4, aux_3) <@ _fe64_cswap_ssss (x2, x3, swap_0);
      x2 <- aux_4;
      x3 <- aux_3;
      leakages <- LeakAddr([]) :: leakages;
      (aux_4, aux_3) <@ _fe64_cswap_rsrs (z2r, z3, swap_0);
      z2r <- aux_4;
      z3 <- aux_3;
      leakages <- LeakAddr([]) :: leakages;
      aux <- b;
      swaps <- aux;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <- z2r;
      z2 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_sub_ssr (x2, z2r);
      t0 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_add_ssr (x2, z2r);
      x2 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_sub_sss (x3, z3);
      t1 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_add_sss (x3, z3);
      z2 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_mul_sss (x2, t1);
      z3 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_mul_sss (z2, t0);
      z2 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_sqr_ss (x2);
      t2 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_sqr_ss (t0);
      t1r <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <- t1r;
      t1 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_add_sss (z3, z2);
      x3 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_sub_sss (z3, z2);
      z2 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_mul_ssr (t2, t1r);
      x2 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_sub_ssr (t2, t1r);
      t0 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_sqr_ss (z2);
      z2 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_mul_a24_ss (t0, (W64.of_int 121665));
      z3 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_sqr_ss (x3);
      x3 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_add_sss (t2, z3);
      t2 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_mul_sss (x1, z2);
      z3 <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux_4 <@ _fe64_mul_rss (t0, t2);
      z2r <- aux_4;
      leakages <- LeakAddr([]) :: leakages;
      aux <- poss;
      pos <- aux;
      leakages <- LeakAddr([]) :: leakages;
      aux <- (pos - (W64.of_int 1));
      pos <- aux;
    leakages <- LeakCond(((W64.of_int 0) \sle pos)) :: LeakAddr([]) :: leakages;
    
    }
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_invert (z2r);
    z2r <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_mul_rsr (x2, z2r);
    x2r <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux_4 <@ _fe64_tobytes (x2r);
    x2r <- aux_4;
    leakages <- LeakAddr([]) :: leakages;
    aux <- outs;
    out <- aux;
    leakages <- LeakFor(0,4) :: LeakAddr([]) :: leakages;
    i <- 0;
    while (i < 4) {
      leakages <- LeakAddr([i]) :: leakages;
      aux <- x2r.[i];
      leakages <- LeakAddr([(W64.to_uint (out + (W64.of_int (8 * i))))]) :: leakages;
      Glob.mem <-
      storeW64 Glob.mem (W64.to_uint (out + (W64.of_int (8 * i)))) aux;
      i <- i + 1;
    }
    return ();
  }
  
  proc curve25519_mulx (out:W64.t, scalar:W64.t, point:W64.t) : unit = {
    
    
    
    leakages <- LeakAddr([]) :: leakages;
    _x25519_scalarmult (out, scalar, point);
    return ();
  }
}.

