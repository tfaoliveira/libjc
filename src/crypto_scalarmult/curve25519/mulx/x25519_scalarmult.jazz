#include "x25519_add.jazz"
#include "x25519_sub.jazz"
#include "x25519_mul_a24.jazz"
#include "x25519_mul.jazz"
#include "x25519_sqr.jazz"
#include "x25519_invert.jazz"
#include "x25519_tobytes.jazz"
#include "x25519_cswap.jazz"

fn ith_bit(stack u8[32] k, reg u64 ctr) -> reg u64
{
  reg u64 p bit;

  p = ctr;
  p >>= 3;
  bit = (64u) k[(int) p];

  p = ctr;
  p &= 7;
  bit >>= p;

  bit &= 1;

  return bit;
}

fn decode_scalar_25519(reg u64 kp) -> stack u8[32]
{
  inline int i;
  stack u8[32] k;
  reg u64 t;

  for i=0 to 4
  { t = [kp + 8*i];
    k[u64 i] = t; }

  k[0]  &= 0xf8;
  k[31] &= 0x7f;
  k[31] |= 0x40;

  return k;
}

fn decode_u_coordinate(reg u64 up) -> reg u64[4]
{
  inline int i;
  reg u64[4] u;

  for i=0 to 4
  { u[i] = [up + 8*i]; }
  u[3] &= 0x7fffffffffffffff;

  return u;
}

fn init_points(reg u64[4] initr) -> stack u64[4], reg u64[4], stack u64[4], stack u64[4]
{
  inline int i;
  stack u64[4] x2 x3 z3;
  reg u64[4] z2r;
  reg u64 z;

  z = #set0();

  x2[0] = 1;
  z2r[0] = 0;
  x3 = initr;
  z3[0] = 1;

  for i=1 to 4
  { x2[i] = z;
    z2r[i] = z;
    z3[i] = z; }

  //     (1,   0, init, 1)
  return x2, z2r, x3,  z3;
}

fn montgomery_ladder_step(stack u8[32] k,
                          stack u64[4] init,
                          stack u64[4] x2,
                          reg   u64[4] z2r,
                          stack u64[4] x3,
                          stack u64[4] z3,
                          stack u64    swapped,
                          reg   u64    ctr) -> stack u64[4],
                                               reg   u64[4],
                                               stack u64[4],
                                               stack u64[4],
                                               stack u64
{
  stack u64[4] z2 t0 t1 t2;
  reg u64[4] t1r;
  reg u64 toswap bit;

  bit = ith_bit(k, ctr);

  toswap  = swapped;
  toswap ^= bit;

  x2, z2r, x3, z3 = _fe64_cswap(x2, z2r, x3, z3, toswap);

  swapped = bit;
                                             z2 = z2r;
  t0  = _fe64_sub_ssr(x2, z2r);
  x2  = _fe64_add_ssr(x2, z2r);

  t1  = _fe64_sub_sss(x3, z3);
  z2  = _fe64_add_sss(x3, z3);

  z3  = _fe64_mul_sss(x2, t1);
  z2  = _fe64_mul_sss(z2, t0);

  t2  = _fe64_sqr_ss(x2);
  t1r = _fe64_sqr_rs(t0);

  x3  = _fe64_add_sss(z3, z2);
  z2  = _fe64_sub_sss(z3, z2);

  x2  = _fe64_mul_ssr(t2, t1r);
  t0  = _fe64_sub_ssr(t2, t1r);

  z2  = _fe64_sqr_ss(z2);
  z3  = _fe64_mul_a24_ss(t0, 121665);
  x3  = _fe64_sqr_ss(x3);

  t2  = _fe64_add_sss(t2, z3);
  z3  = _fe64_mul_sss(init, z2);
  z2r = _fe64_mul_rss(t0, t2);

  return x2, z2r, x3, z3, swapped;
}


fn montgomery_ladder(reg u64[4] initr, stack u8[32] k) -> stack u64[4],
                                                          reg u64[4],
                                                          stack u64[4],
                                                          stack u64[4]
{
  stack u64[4] init x2 x3 z3;
  reg u64[4] z2r;
  stack u64 ctrs swapped;
  reg u64 ctr bit;

  (x2,z2r,x3,z3) = init_points(initr); 
  init = initr;

  ctr = 254;
  swapped = 0;

  while
  {
    ctrs = ctr;

    (x2, z2r, x3, z3, swapped) = montgomery_ladder_step(k, init, x2, z2r, x3, z3, swapped, ctr);

    ctr = ctrs;
    ctr -= 1;
  } (ctr >=s 0)

  return x2, z2r, x3, z3;
}

fn encode_point(stack u64[4] x2, reg u64[4] z2r) -> reg u64[4]
{
  reg u64[4] r;

  z2r = _fe64_invert(z2r);
  r = _fe64_mul_rsr(x2, z2r);
  r = _fe64_tobytes(r);

  return r;
}


fn _x25519_scalarmult(
  reg u64 rp,
  reg u64 kp,
  reg u64 up
)
{
  inline int i;
  stack u8[32] k;
  stack u64[4] x2 x3 z3;
  reg u64[4] u z2r r;
  reg u64 swap pos b;
  stack u64 rps swaps poss;

  rps = rp; // rp dead

  k = decode_scalar_25519(kp); // kp dead
  u = decode_u_coordinate(up); // up dead
  (x2,z2r,x3,z3) = montgomery_ladder(u, k);
  r = encode_point(x2,z2r);

  rp = rps;
  for i=0 to 4
  { [rp + 8*i] = r[i]; }
}

//////

fn _fe64_1_x3() -> stack u64[4], reg u64[4], stack u64[4]
{
  inline int i;
  stack u64[4] f1s f3s;
  reg   u64[4] f2;
  reg   u64 z;

  z = #set0();

  f1s[0] = 1;
  f2[0]  = 1;
  f3s[0] = 1;

  for i=1 to 4
  { f1s[i] = z;
    f2[i]  = z;
    f3s[i] = z;
  }

  return f1s, f2, f3s;
}

// "How to (pre-)compute a ladder"
// implementation in C of the paper: https://github.com/armfazh/rfc7748_precomputed
fn _x25519_scalarmult_base(
  reg u64 out,
  reg u64 scalar,
  reg u64 table
)
{
  inline int i;
  stack u64[4] u1 z1 u2 z2 t1 t2 t3 t4;
  reg   u64[4] z1r u2r t1r t2r t3r;
  stack u8[32] e;
  reg u64 t swap pos b;
  stack u64 outs tables swaps poss;

  outs = out; // out dead
  tables = table; // table dead

  for i=0 to 4
  { t = [scalar + 8*i];
    e[u64 i] = t; } // scalar dead

  e[0]  &= 0xf8;
  e[31] &= 0x7f;
  e[31] |= 0x40;

  u1, z1r, z2 = _fe64_1_x3();

	u2r[0] = 0x7e94e1fec82faabd;
	u2r[1] = 0xbbf095ae14b2edf8;
	u2r[2] = 0xadc7a0b9235d48e2;
	u2r[3] = 0x1eaecdeee27cab34;

  u2 = u2r;

  pos = 3;
  swaps = 1;
  while
  {
    poss = pos;
    swap = swaps;

    b = ith_bit(e, pos);

    swap ^= b;

    u1,  u2 = _fe64_cswap_ssss(u1,  u2, swap);
    z1r, z2 = _fe64_cswap_rsrs(z1r, z2, swap);

    swaps = b;

    t2    = _fe64_sub_ssr(u1, z1r);
    t1    = _fe64_add_ssr(u1, z1r);

    table = tables;
    t3r   = _fe64_mul_rms(table, t2);

    t2    = _fe64_sub_ssr(t1, t3r);
    t1r   = _fe64_add_rsr(t1, t3r);

    t1    = _fe64_sqr_sr(t1r);
    t2    = _fe64_sqr_ss(t2);

    u1    = _fe64_mul_sss(z2, t1);
    z1r   = _fe64_mul_sss(u2, t2);

    tables += 8*4;

    pos = poss;
    pos += 1;
  } (pos < 255)

  pos = 0;
  while
  {
    poss = pos;

    t1 = _fe64_add_ssr(u1, z1r);
    t2 = _fe64_sub_ssr(u1, z1r);

    t1  = _fe64_sqr_ss(t1);
    t2r = _fe64_sqr_rs(t2);

    t3  = t2r;

    t2 = _fe64_sub_ssr(t1, t2r);

    //t4 = _fe64_mul121666_ss(t2);
    t4 = _fe64_mul_a24_ss(t2, 121666);

    t4 = _fe64_add_sss(t4, t3);

    u1  = _fe64_mul_sss(t1, t3);
    z1r = _fe64_mul_rss(t2, t4);

    pos = poss;
    pos += 1;
  } (pos < 3)

  t1r = _fe64_invert(z1r);
  t1r = _fe64_mul_rsr(u1, t1r);
  t1r = _fe64_tobytes(t1r);

  out = outs;
  for i=0 to 4
  { [out + 8*i] = t1r[i]; }
}
