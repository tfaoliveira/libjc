#include "x25519_add.jazz"
#include "x25519_sub.jazz"
#include "x25519_mul121666.jazz"
#include "x25519_mul.jazz"
#include "x25519_sqr.jazz"
#include "x25519_invert.jazz"
#include "x25519_invert_regs.jazz"
#include "x25519_tobytes.jazz"
#include "x25519_frombytes.jazz"
#include "x25519_cswap.jazz"

fn _fe64_0_1_x2() -> reg u64[4], stack u64[4], stack u64[4]
{
  inline int i;
  reg   u64[4] f1s;
  stack u64[4] f2s f3s;
  reg u64 z;

  z = #set0();

  f1s[0] = z;
  f2s[0] = 1;
  f3s[0] = 1;

  for i=1 to 4
  { f1s[i] = z;
    f2s[i] = z;
    f3s[i] = z;
  }

  return f1s, f2s, f3s;
}

fn _bit_select(stack u8[32] e, reg u64 pos) -> reg u64
{
  reg u64 b p;

  p = pos;
  p >>= 3;
  b = (64u) e[(int) p];

  p = pos;
  p &= 7;
  b >>= p;

  b &= 1;

  return b;
}

fn _x25519_scalarmult(
  reg u64 out,
  reg u64 scalar,
  reg u64 point
)
{
  inline int i;
  stack u64[4] x1 x2 z2 x3 z3 tmp0 tmp1;
  reg u64[4] x2r z2r;
  stack u8[32] e;
  reg u64 t swap pos b;
  stack u64 outs swaps poss;

  outs = out; // out dead

  for i=0 to 4
  { t = [scalar + 8*i];
    e[u64 i] = t; } // scalar dead

  e[0]  &= 0xf8;
  e[31] &= 0x7f;
  e[31] |= 0x40;

  x3, x1 = _fe64_frombytes(point); // point dead
  z2r, z3, x2 = _fe64_0_1_x2();

  pos = 254;
  swaps = 0;
  while
  {
    poss = pos;
    swap = swaps;

    b = _bit_select(e, pos);

    swap ^= b;

    x2,  x3 = _fe64_cswap_ssss(x2,  x3, swap);
    z2r, z3 = _fe64_cswap_rsrs(z2r, z3, swap);

    swaps = b;
                                               z2 = z2r;
    tmp0 = _fe64_sub_ssr(x2, z2r);
    x2   = _fe64_add_ssr(x2, z2r);
                                             
    tmp1 = _fe64_sub_sss(x3, z3);
    z2   = _fe64_add_sss(x3, z3);

    z3   = _fe64_mul_sss(x2, tmp1);
    z2   = _fe64_mul_sss(z2, tmp0);

    tmp1 = _fe64_sqr_ss(tmp0);
    tmp0 = _fe64_sqr_ss(x2);

    x3   = _fe64_add_sss(z3, z2);
    z2   = _fe64_sub_sss(z3, z2);

    x2   = _fe64_mul_sss(tmp0, tmp1);
    tmp0 = _fe64_sub_sss(tmp0, tmp1);

    z2   = _fe64_sqr_ss(z2);
    z3   = _fe64_mul121666_s(tmp0);
    x3   = _fe64_sqr_ss(x3);

    tmp1 = _fe64_add_sss(tmp1, z3);
    z3   = _fe64_mul_sss(x1, z2);
    z2r  = _fe64_mul_rss(tmp0, tmp1);

    pos = poss;
    pos -= 1;
  } (pos >=s 0)

  z2r = _fe64_invert(z2r);
  x2r = _fe64_mul_rsr(x2, z2r);
  x2r = _fe64_tobytes(x2r);

  out = outs;
  for i=0 to 4
  { [out + 8*i] = x2r[i]; }
}


