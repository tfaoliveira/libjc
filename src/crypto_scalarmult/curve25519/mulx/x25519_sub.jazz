#ifndef X25519_SUB
#define X25519_SUB

// h = f - g
// h = (2**0*f0 + 2**64*f1 + 2**128*f2 + 2**192*f3) - 
//     (2**0*g0 + 2**64*g1 + 2**128*g2 + 2**192*g3)

fn _fe64_sub_rrs
( reg   u64[4] f,
  stack u64[4] g,
  reg   u64    z
) -> reg u64[4]
{
  inline int i;
  reg bool cf;
  reg u64[4] h;

  h = f;

  cf, h[0] -= g[0];
  for i=1 to 4
  { cf, h[i] -= g[i] - cf; }

  _,_,_,_,_, z = #x86_SBB(z, z, cf);
  z &= 38;

  cf, h[0] -= z;
  for i=1 to 4
  { cf, h[i] -= 0 - cf; }

  _,_,_,_,_, z = #x86_SBB(z, z, cf);
  z &= 38;
  h[0] -= z;

  return h;
}

fn _fe64_sub_sss(stack u64[4] fs gs) -> stack u64[4]
{
  stack u64[4] hs;
  reg u64[4] h f;
  reg u64 z;

  z = #set0();
  f = fs;
  h = _fe64_sub_rrs(f, gs, z);
  hs = h;

  return hs;
}

fn _fe64_sub_ssr(stack u64[4] fs, reg u64[4] g) -> stack u64[4]
{
  inline int i;
  reg bool cf;
  stack u64[4] hs;
  reg u64[4] h;
  reg u64 z;

  z = #set0();
  h = fs;

  cf, h[0] -= g[0];
  for i=1 to 4
  { cf, h[i] -= g[i] - cf; }

  _,_,_,_,_, z = #x86_SBB(z, z, cf);
  z &= 38;

  cf, h[0] -= z;
  for i=1 to 4
  { cf, h[i] -= 0 - cf; }

  _,_,_,_,_, z = #x86_SBB(z, z, cf);
  z &= 38;
  h[0] -= z;

  hs = h;
  return hs;
}

#endif
