#ifndef X25519_MUL_REGS
#define X25519_MUL_REGS

/*

  abbrevs: (.) <- multiplication low-part
           (x) <- multiplication hi-part


2^64
0:     0.0
1:     0x0 0.1 1.0
2:     0.2 0x1 1x0    1.1 2.0
3:     0x2 0.3 1.2    1x1 2x0 2.1 3.0
4:     1.3 0x3 1x2    2.2 3.1 2x1 3x0
5:     1x3 2.3 3.2    2x2 3x1
6:     3.3 2x3 3x2
7:     3x3
8:     

2^64 ---- 1
4:     1.3            2.2 3.1 
5:     1x3 2.3 3.2    2x2 3x1
6:     3.3 2x3 3x2
7:     3x3
8:     

2^64 ---- 2 (4*38)
0:     4L  7H  0.0    
1:     5L  4H  0x0    0.1 1.0
2:     6L  5H  0.2    0x1 1x0
3:     7L  6H  0x2    0.3 1.2    2.1 3.0
4:                    0x3 1x2    2x1 3x0
5:

2^64 ---- 3 (2*38)
0:     4L
1:     4H  5L
2:     1.1 2.0 
3:     1x1 2x0

2^64 ---- 4 (1*19)
1:     4L
2:     0
3:     0
4:     0

*/

/** args: reg u64[4] x <- not preserved
          reg u64[4] y <- preserved
    result: reg u64[4]                         */
fn _fe64_mul_regs(reg u64[4] x y) -> reg u64[4] {
 reg u64[4] r;
 reg u64 tA tB tC; //temps
 reg bool cf of;
 // clear flags
 of, cf, _, _, _, tA = #x86_XOR(tA, tA);  
 tC       = y[3];
 r[1],r[0]= #x86_MULX(tC, x[1]);
 r[2], tA = #x86_MULX(tC, x[2]);
 cf, r[1] = #x86_ADCX(r[1], tA, cf);
 tC       = x[3];
 tA, tB   = #x86_MULX(tC, y[2]);
 of, r[1] = #x86_ADOX(r[1], tB, of);
 cf, r[2] = #x86_ADCX(r[2], tA, cf);
 r[3], tB = #x86_MULX(tC, y[3]);
 of, r[2] = #x86_ADOX(r[2], tB, of);
 tA       = 0;
 tB       = 0;
 cf, r[3] = #x86_ADCX(r[3], tA, cf);
 of, r[3] = #x86_ADOX(r[3], tA, of);
 cf, tA   = #x86_ADCX(tA, tA, cf);
 of, tA   = #x86_ADOX(tA, tB, of);
 // obs: tA is r[4]
 //tC       = x[3];
 tC, tB   = #x86_MULX(tC, y[1]);
 cf, r[0] = #x86_ADCX(r[0], tB, cf);
 cf, r[1] = #x86_ADCX(r[1], tC, cf);
 tC       = x[2];
 tC, tB   = #x86_MULX(tC, y[2]);
 of, r[0] = #x86_ADOX(r[0], tB, of);
 of, r[1] = #x86_ADOX(r[1], tC, of);
 tB       = 0;
 cf, r[2] = #x86_ADCX(r[2], tB, cf);
 of, r[2] = #x86_ADOX(r[2], tB, of);
 cf, r[3] = #x86_ADCX(r[3], tB, cf);
 of, r[3] = #x86_ADOX(r[3], tB, of);
 cf, tA   = #x86_ADCX(tA, tB, cf);
 of, tA   = #x86_ADOX(tA, tB, of);
 // first reduction
 tC       = 38;
 tB, tA   = #x86_MULX(tC, tA); // tB=0
 tB, r[0] = #x86_MULX(tC, r[0]);
 tC, r[1] = #x86_MULX(tC, r[1]);
 cf, r[1] = #x86_ADCX(r[1], tB, cf);
 tB       = tC;
 tC       = 38;
 tC, r[2] = #x86_MULX(tC, r[2]);
 cf, r[2] = #x86_ADCX(r[2], tB, cf);
 tB       = tC;
 tC       = 38;
 tC, r[3] = #x86_MULX(tC, r[3]);
 cf, r[3] = #x86_ADCX(r[3], tB, cf);
 cf, tA   = #x86_ADCX(tA, tC, cf); // cf=0
 tC       = 38;
 tB, tA   = #x86_MULX(tC, tA); // tB=0
 // 2^64 ---- 2 (4*38)
 // 0:     0.0    
 // 1:     0x0  0.1  1.0
 // 2:     0.2  0x1  1x0
 // 3:     0x2       1.2  0.3  2.1  3.0
 // 4:               1x2  0x3  2x1  3x0
 cf, r[0] = #x86_ADCX(r[0], tA, cf);
 tC       = x[0];
 tB, tA   = #x86_MULX(tC, y[0]);
 of, r[0] = #x86_ADOX(r[0], tA, of);
 cf, r[1] = #x86_ADCX(r[1], tB, cf);
 tB, tA   = #x86_MULX(tC, y[1]);
 of, r[1] = #x86_ADOX(r[1], tA, of);
 cf, r[2] = #x86_ADCX(r[2], tB, cf);
 tB, tA   = #x86_MULX(tC, y[2]);
 tC       = 0;
 of, r[2] = #x86_ADOX(r[2], tA, of);
 cf, r[3] = #x86_ADCX(r[3], tB, cf);
 tA       = 0;
 of, r[3] = #x86_ADOX(r[3], tC, of);
 cf, tA   = #x86_ADCX(tA, tC, cf); // cf=0
 of, tA   = #x86_ADOX(tA, tC, of); // of=0
 tC       = x[1];
 tC, tB   = #x86_MULX(tC, y[0]);
 cf, r[1] = #x86_ADCX(r[1], tB, cf);
 cf, r[2] = #x86_ADCX(r[2], tC, cf);
 tC       = x[1];
 tC, tB   = #x86_MULX(tC, y[2]);
 cf, r[3] = #x86_ADCX(r[3], tB, cf);
 cf, tA   = #x86_ADCX(tA, tC, cf);
 // x[0] is DEAD
 tC       = x[0];
 x[0], tB   = #x86_MULX(tC, y[3]);
 of, r[3] = #x86_ADOX(r[3], tB, of);
 of, tA   = #x86_ADOX(tA, x[0], of);
 tB       = 0;
 x[0]     = 0;
 cf, tB   = #x86_ADCX(tB, x[0], cf); // cf=0
 of, tB   = #x86_ADOX(tB, x[0], of); // of=0
 tC       = x[2];
 x[0], tC = #x86_MULX(tC, y[1]);
 cf, r[3] = #x86_ADCX(r[3], tC, cf);
 cf, tA   = #x86_ADCX(tA, x[0], cf);
 // x[3] is DEAD
 tC       = x[3];
 x[0],x[3]= #x86_MULX(tC, y[0]);
 of, r[3] = #x86_ADOX(r[3], x[3], of);
 of, tA   = #x86_ADOX(tA, x[0], of);
 x[3]       = 0;
 cf, tB   = #x86_ADCX(tB, x[3], cf); // cf=0
 of, tB   = #x86_ADOX(tB, x[3], of); // of=0
 // second reduction
 x[3]     = 38;
 tC, tA   = #x86_MULX(x[3], tA);
 _, tB    = #x86_MULX(x[3], tB);
 cf, tB   = #x86_ADCX(tB, tC, cf); // cf=0
 cf, r[0] = #x86_ADCX(r[0], tA, cf);
 cf, r[1] = #x86_ADCX(r[1], tB, cf);
 x[3]     = x[1];
 tB, tA   = #x86_MULX(x[3], y[1]);
 cf, r[2] = #x86_ADCX(r[2], tA, cf);
 cf, r[3] = #x86_ADCX(r[3], tB, cf);
 tC       = 0;
 cf, tC   = #x86_ADCX(tC, tC, cf);
 x[3]     = x[2]; // x[2] is DEAD
 tB, tA   = #x86_MULX(x[3], y[0]);
 cf, r[2] = #x86_ADCX(r[2], tA, cf);
 cf, r[3] = #x86_ADCX(r[3], tB, cf);
 tA       = 0;
 cf, tC   = #x86_ADCX(tC, tA, cf); // cf=0
 // final reduction
 of, cf, _, _, _, tC = #x86_SHL(tC, 1); // tC *=2
 of, cf, _, _, _, r[3] = #x86_SHL(r[3], 1); // cf = MSB(r[3])
 cf, tC = #x86_ADCX(tC, tA, cf); // tC += cf (cf,of=false)
 of, cf, _, _, _, r[3] = #x86_SHR(r[3], 1); //restore r[3] without MSB
 of, cf, _, _, _, tC = #x86_IMULtimm(tC,19); //tC *= 19; // cf,of=false
 cf, r[0] = #x86_ADCX(r[0], tC, cf);
 cf, r[1] = #x86_ADCX(r[1], tA, cf);
 cf, r[2] = #x86_ADCX(r[2], tA, cf);
 cf, r[3] = #x86_ADCX(r[3], tA, cf); // cf=0

 return r;
}

#endif
