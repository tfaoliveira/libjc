#ifndef CRYPTO_SCALARMULT_X25519_REF4_MUL121666
#define CRYPTO_SCALARMULT_X25519_REF4_MUL121666

inline fn __mul121666(stack u64[4] xa) -> reg u64[4]
{
  reg u64 rax rdx holdc t1 t2 t3 t4;
  reg u64[4] z;
  reg bool cf;

  holdc = 121666;

  rax = xa[0];
  rdx, rax = rax * holdc;
  z[0] = rax;
  z[1] = rdx;

  rax = xa[2];
  rdx, rax = rax * holdc;
  z[2] = rax;
  z[3] = rdx;

  rax = xa[1];
  rdx, rax = rax * holdc;
  t1 = rax;
  t2 = rdx;

  rax = xa[3];
  rdx, rax = rax * holdc;
  t3 = rax;
  t4 = rdx;

  cf, z[1] += t1;
  cf, z[2] += t2 + cf;
  cf, z[3] += t3 + cf;
  _, t4 += 0 + cf;
  _, t4 *= 38;

  cf, z[0] += t4;
  cf, z[1] += 0 + cf;
  cf, z[2] += 0 + cf;
  cf, z[3] += 0 + cf;

  t1 = 38;
  t2 = #MOV(0);
  t1 = t2 if !cf;
  z[0] += t1;

  return z;
}

inline fn __mul121666_ss(stack u64[4] f) -> stack u64[4]
{
  stack u64[4] hs;
  reg u64[4] h;

  h = __mul121666(f);
  hs = h;

  return hs;
}

#endif
