#ifndef CRYPTO_SCALARMULT_X25519_COMMON
#define CRYPTO_SCALARMULT_X25519_COMMON

inline fn __ith_bit(stack u8[32] k, reg u64 ctr) -> reg u64
{
  reg u64 p bit;

  p = ctr;
  p >>= 3;
  bit = (64u) k[(int) p];

  p = ctr;
  p &= 7;
  bit >>= p;

  bit &= 1;

  return bit;
}

inline fn __next_bit(stack u64 k) -> reg u64, stack u64
{
  reg bool cf;
  reg u64 b one;
  b = #set0();
  one = 1;
  _, cf, _, _, _, k = #SHL(k, 1);
  b = one if cf;
  return b, k;
}

inline fn __decode_scalar_25519(reg u64 kp) -> stack u8[32]
{
  inline int i;
  stack u8[32] k;
  reg u64 t;

  for i=0 to 4
  { t = [kp + 8*i];
    k[u64 i] = t; }

  k[0]  &= 0xf8;
  k[31] &= 0x7f;
  k[31] |= 0x40;

  return k;
}

#if 0
inline fn __decode_scalar_25519_shl1(reg u64 kp) -> stack u64[4]
{
  inline int i;
  stack u64[4] ks;
  reg u64[4] kr;

  for i=0 to 4
  { kr[i] = [kp + 8*i]; }
  kr[3] <<= 1;
  for i=0 to 4
  { ks[i] = kr[i]; }
  ks[u8 0]  &= 0xf8;
  ks[u8 31] |= 0x80;

  return ks;
}
#else
inline fn __decode_scalar_25519_shl1(reg u64 kp) -> stack u64[4]
{
  inline int i;
  reg u64[4] k;
  stack u64[4] ks;

  for i=0 to 4
  { k[i] = [kp + 8*i]; }
  k[3] <<= 1;
  k[0] &= 0xfffffffffffffff8;
  k[3] |= 0x8000000000000000;

  ks = k;

  return ks;
}
#endif

inline fn __decode_u_coordinate(reg u64 up) -> reg u64[4]
{
  inline int i;
  reg u64[4] u;

  for i=0 to 4
  { u[i] = [up + 8*i]; }
  u[3] &= 0x7fffffffffffffff;

  return u;
}

inline fn __init_points(reg u64[4] initr) -> stack u64[4], reg u64[4], stack u64[4], stack u64[4]
{
  inline int i;
  stack u64[4] x2 x3 z3;
  reg u64[4] z2r;
  reg u64 z;

  z = #set0();

  x2[0] = 1;
  z2r[0] = 0;
  x3 = initr;
  z3[0] = 1;

  for i=1 to 4
  { x2[i] = z;
    z2r[i] = z;
    z3[i] = z; }

  //     (1,   0, init, 1)
  return x2, z2r, x3,  z3;
}

inline fn __init_points_x3() -> stack u64[4], reg u64[4], stack u64[4]
{
  inline int i;
  stack u64[4] f1s f3s;
  reg   u64[4] f2;
  reg   u64 z;

  z = #set0();

  f1s[0] = 1;
  f2[0]  = 1;
  f3s[0] = 1;

  for i=1 to 4
  { f1s[i] = z;
    f2[i]  = z;
    f3s[i] = z;
  }

  return f1s, f2, f3s;
}

#endif
