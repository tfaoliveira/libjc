#ifndef CRYPTO_SCALARMULT_X25519_COMMON
#define CRYPTO_SCALARMULT_X25519_COMMON

inline fn __ith_bit(stack u8[32] k, reg u64 ctr) -> reg u64
{
  reg u64 p bit;

  p = ctr;
  p >>= 3;
  bit = (64u) k[(int) p];

  p = ctr;
  p &= 7;
  bit >>= p;

  bit &= 1;

  return bit;
}

inline fn __next_bit(stack u64 k) -> reg u64, stack u64
{
  reg bool cf;
  reg u64 b one;
  _,_,_,_,_,b = #set0();
  one = 1;
  _, cf, _, _, _, k = #SHL(k, 1);
  b = one if cf;
  return b, k;
}

inline fn __decode_scalar_25519(reg u64 kp) -> stack u8[32]
{
  inline int i;
  stack u8[32] k;
  reg u64 t;

  for i=0 to 4
  { t = [kp + 8*i];
    k[u64 i] = t; }

  k[0]  &= 0xf8;
  k[31] &= 0x7f;
  k[31] |= 0x40;

  return k;
}

#if 0
inline fn __decode_scalar_25519_shl1(reg u64 kp) -> stack u64[4]
{
  inline int i;
  stack u64[4] ks;
  reg u64[4] kr;

  for i=0 to 4
  { kr[i] = [kp + 8*i]; }
  kr[3] <<= 1;
  for i=0 to 4
  { ks[i] = kr[i]; }
  ks[u8 0]  &= 0xf8;
  ks[u8 31] |= 0x80;

  return ks;
}
#else
inline fn __decode_scalar_25519_shl1(reg u64 kp) -> stack u64[4]
{
  inline int i;
  reg u64[4] k;
  stack u64[4] ks;

  for i=0 to 4
  { k[i] = [kp + 8*i]; }
  k[3] <<= 1;
  k[0] &= 0xfffffffffffffff8;
  k[3] |= 0x8000000000000000;

  ks = k;

  return ks;
}
#endif

#endif
