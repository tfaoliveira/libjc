#ifndef CRYPTO_SCALARMULT_X25519_COMMON_LOAD5
#define CRYPTO_SCALARMULT_X25519_COMMON_LOAD5

inline fn __decode_u_coordinate(reg u64 up) -> reg u64[5]
{
  inline int i;
  reg u64[4] t;
  reg u64[5] u;
  reg u64 mask;

  for i=0 to 4
  { t[i] = [up + 8*i]; }
  mask = 0x7ffffffffffff;
  
  //u[0] = t[0] & mask; // 51 spent; 13 left
  u[0] = t[0];
  u[0] &= mask;
  
  //u[1] = (t[1] << 13) || (t[0] >> 51) & mask; // 38 spent; 26 left
  u[1] = t[1];
  u[1] <<= 13;
  t[0] >>= 51;
  u[1] |= t[0];
  u[1] &= mask;
  
  //u[2] = (t[2] << 26) || (t[1] >> 38) & mask; // 25 spent; 39 left
  u[2] = t[2];
  u[2] <<= 26;
  t[1] >>= 38;
  u[2] |= t[1];
  u[2] &= mask;
  
  //u[3] = (t[3] << 39) || (t[2] >> 25) & mask; // 12 spent; '52' left
  u[3] = t[3];
  u[3] <<= 39;
  t[2] >>= 25;
  u[3] |= t[2];
  u[3] &= mask;
  
  //u[4] = (t[3] >> 12) & mask;
  u[4] = t[3];
  u[4] >>= 12;
  u[4] &= mask;

  return u;
}

inline fn __init_points(reg u64[5] initr) -> stack u64[5], reg u64[5], stack u64[5], stack u64[5]
{
  inline int i;
  stack u64[5] x2 x3 z3;
  reg u64[5] z2r;
  reg u64 z;

  _,_,_,_,_,z = #set0();

  x2[0] = 1;
  z2r[0] = 0;
  x3 = initr;
  z3[0] = 1;

  for i=1 to 5
  { x2[i] = z;
    z2r[i] = z;
    z3[i] = z; }

  //     (1,   0, init, 1)
  return x2, z2r, x3,  z3;
}

inline fn __init_points_x3() -> stack u64[5], reg u64[5], stack u64[5]
{
  inline int i;
  stack u64[5] f1s f3s;
  reg   u64[5] f2;
  reg   u64 z;

  _,_,_,_,_,z = #set0();

  f1s[0] = 1;
  f2[0]  = 1;
  f3s[0] = 1;

  for i=1 to 5
  { f1s[i] = z;
    f2[i]  = z;
    f3s[i] = z;
  }

  return f1s, f2, f3s;
}

#endif
