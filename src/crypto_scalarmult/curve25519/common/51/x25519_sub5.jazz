#ifndef CRYPTO_SCALARMULT_X25519_COMMON_SUB5
#define CRYPTO_SCALARMULT_X25519_COMMON_SUB5

inline fn __sub5_rrs
( reg   u64[5] f,
  stack u64[5] gs
) -> reg u64[5]
{
  inline int i;
  reg u64[5] h;
  reg u64 _2p0 _2p1234;

  _2p0 = 0xfffffffffffda;
  _2p1234 = 0xffffffffffffe;
  
  h = f;
  h[0] += _2p0;
  for i=1 to 5
  { h[i] += _2p1234; }
  
  for i=0 to 5
  { h[i] -= gs[i]; }

  return h;
}

inline fn __sub5_sss(stack u64[5] fs gs) -> stack u64[5]
{
  stack u64[5] hs;
  reg u64[5] h f;

  f = fs;
  h = __sub5_rrs(f, gs);
  hs = h;

  return hs;
}

inline fn __sub5_rss(stack u64[5] fs gs) -> reg u64[5]
{
  stack u64[5] hs;
  reg u64[5] h f;

  f = fs;
  h = __sub5_rrs(f, gs);

  return h;
}

inline fn __sub5_rsr(stack u64[5] fs, reg u64[5] g) -> reg u64[5]
{
  inline int i;
  reg u64[5] h;
  reg u64 _2p0 _2p1234;

  _2p0 = 0xfffffffffffda;
  _2p1234 = 0xffffffffffffe;
  
  h = fs;
  h[0] += _2p0;
  for i=1 to 5
  { h[i] += _2p1234; }
  
  for i=0 to 5
  { h[i] -= g[i]; }

  return h;
}

inline fn __sub5_ssr(stack u64[5] fs, reg u64[5] g) -> stack u64[5]
{
  stack u64[5] hs;
  reg u64[5] h;

  h = __sub5_rsr(fs, g);
  hs = h;

  return hs;
}

#endif
