#ifndef CRYPTO_SCALARMULT_X25519_COMMON_TOBYTES5
#define CRYPTO_SCALARMULT_X25519_COMMON_TOBYTES5

inline fn __tobytes5(reg u64[5] f) -> reg u64[4]
{
  reg bool eq;
  reg u64 loop;
  reg u64[4] h;
  reg u64 t two51minus1 two51minus19;

  two51minus1 = 0x0007FFFFFFFFFFFF;
  two51minus19 = two51minus1;
  two51minus19 -= 18;
  loop = 3;

  while(loop > 0){
    t = f[0];
    t >>= 51;
    f[0] &= two51minus1;
    f[1] += t;
    t = f[1];
    t >>= 51;
    f[1] &= two51minus1;
    f[2] += t;
    t = f[2];
    t >>= 51;
    f[2] &= two51minus1;
    f[3] += t;
    t = f[3];
    t >>= 51;
    f[3] &= two51minus1;
    f[4] += t;
    t = f[4];
    t >>= 51;
    f[4] &= two51minus1;
    t *= 19;
    f[0] += t;
    loop = loop - 1;
  }
  t = 1;

	//signed<? f[0] - two51minus19 
	t = loop if (f[0] <s two51minus19); /*t = loop if signed<*/
	eq = (f[1] == two51minus1);
	t = loop if !eq;
	eq = (f[2] == two51minus1);
	t = loop if !eq;
	eq = (f[3] == two51minus1);
	t = loop if !eq;
	eq = (f[4] == two51minus1);
	t = loop if !eq;
	t = -t;
	two51minus1 &= t;
	two51minus19 &= t;

	f[0] -= two51minus19;
	f[1] -= two51minus1;
	f[2] -= two51minus1;
	f[3] -= two51minus1;
	f[4] -= two51minus1;

  //

  //h[0] = (f[1] << 51) || f[0]; // 13 spent; 38 left
  h[0] = f[1];
  h[0] <<= 51;
  h[0] |= f[0];
  
  //h[1] = (f[2] << 38) || (f[1] >> 13); // 26 spent; 25 left
  h[1] = f[2];
  h[1] <<= 38;
  f[1] >>= 13;
  h[1] |= f[1];
  
  // h[2] = (f[3] << 25) || (f[2] >> 26); // 39 spent; 12 left
  h[2] = f[3];
  h[2] <<= 25;
  f[2] >>= 26;
  h[2] |= f[2];
  
  // h[3] = f[4] << 12 || (f[3] >> 39); // 51 spent; 0 left
  h[3] = f[4];
  h[3] <<= 12;
  f[3] >>= 39;
  h[3] |= f[3];

	return h;

  #if 0
  //CHECKME
  inline int i;
  reg u64[4] h;
  reg u64 mask t;
  
  mask = 0x7ffffffffffff;
  
  t = #LEA(f[0] + 19);
  t >>= 51;
  for i=1 to 5
  { t = #LEA(f[i] + t);
    t >>= 51; }

  t *= 19;
  f[0] += t;
  for i=1 to 5
  { t = f[i-1];
    f[i-1] &= mask;
    t >>= 51;
    f[i] += t;
  }
  f[4] &= mask;
  #endif

}

#endif
