#include "../../../crypto_perm/keccak_f1600/ref/keccak_f1600_ref.jazz"

fn st0() -> stack u64[25] 
{
  stack u64[25] state;
  inline int i;

  for i = 0 to 25 {
    state[i] = 0;
  }
  return state;
}

fn add_full_block(
  stack u64[25] state,
  reg u64 in,
  stack u64 rate
) -> stack u64[25] 
{
  reg u64 i, t;

  i = 0;
  while (i < rate)
  {
    t = [in + 8 * i];
    state[(int) i] ^= t;
    i = i + 1;
  }

  return state;
}

fn add_final_block(
  stack u64[25] state,
  reg u64 in,
  reg u64 inlen,
  stack u8 trail_byte,
  stack u64 rate
) -> stack u64[25] 
{
  reg u64 i, j, t;
  reg u8 c;

  i = 0;
  while (inlen >= 8)
  {
    t = [in + 8 * i];
    state[(int) i] ^= t;
    i = i + 1;
    inlen = inlen - 8;
  }

  j = 8 * i;
  while (inlen > 0) {
      c = (u8)[in + j];
      state[u8 (int) j] ^= c;
      inlen = inlen - 1;
      j = j + 1;
  }

  state[u8 (int) j] ^= trail_byte;
  state[u8 (int) rate - 1] ^= 0x80;

  return state;
}


fn xtr_full_block(
  stack u64[25] state,
  reg u64 out,
  stack u64 rate
) 
{
  reg u64 i, t;

  i = 0;
  while (i < rate)
  {
    t = state[(int) i];
    [out + 8 * i] = t;
    i = i + 1;
  }
}

fn xtr_bytes(
  stack u64[25] state,
  reg u64 out,
  reg u64 outlen
) 
{
  reg u64 i, j, t;
  reg u8 c;

  i = 0;
  while (outlen >= 8)
  {
    t = state[(int) i];
    [out + 8 * i] = t;
    i = i + 1;
    outlen = outlen - 8;
  }

  j = 8 * i;
  while (outlen > 0) {
      c = state[u8 (int) j];
      (u8)[out + j] = c;
      outlen = outlen - 1;
      j = j + 1;
  }
}

fn keccak_1600(
  reg u64 out, // output pointer with at least hash_bytes available
  reg u64 outlen, // output length
  reg u64 in, // input pointer with inlen bytes
  reg u64 inlen, // input length in bytes
  stack u8 trail_byte,
  stack u64 rate
)
{
  stack u64[25] state;

  state = st0();

  while ( inlen >= rate )
  {
    state = add_full_block(state, in, rate);
    state = keccak_f1600(state);
    inlen = inlen - rate;
    in = in + rate;
  }

  state = add_final_block(state, in, inlen, trail_byte, rate);

  while ( outlen > rate )
  {
    state = keccak_f1600(state);
    xtr_full_block(state, out, rate);
    outlen = outlen - rate;
    out = out + rate;
  }

    state = keccak_f1600(state);
    xtr_bytes(state, out, outlen);
}
