fn keccak_f(
  _state_t A,
  reg u64 iotas
) -> _state_t, reg u64
{
  reg bool zf;
  reg u64[5] C D;
  reg u64[2] T;
  _state_t R;

  setup(A,R)

  S(A,0,1) = #x86_NOT(S(A,0,1));
  S(A,0,2) = #x86_NOT(S(A,0,2));
  S(A,1,3) = #x86_NOT(S(A,1,3));
  S(A,2,2) = #x86_NOT(S(A,2,2));
  S(A,3,2) = #x86_NOT(S(A,3,2));
  S(A,4,0) = #x86_NOT(S(A,4,0));

	C[0] = S(A,4,0);
	C[1] = S(A,4,1);
	C[2] = S(A,4,2);
	C[3] = S(A,4,3);
	C[4] = S(A,4,4);

  while
  {
	  D[0] = S(A,0,0);
	  D[1] = S(A,1,1);
	  D[2] = S(A,2,2);
	  D[3] = S(A,3,3);
	  C[2] ^= S(A,0,2);
	  C[3] ^= S(A,0,3);
	  C[0] ^= D[0];
	  C[1] ^= S(A,0,1);
	  C[2] ^= S(A,1,2);
	  C[0] ^= S(A,1,0);
	  D[4] = C[4];
	  C[4] ^= S(A,0,4);
	  C[2] ^= D[2];
	  C[0] ^= S(A,2,0);
	  C[3] ^= S(A,1,3);
	  C[1] ^= D[1];
	  C[4] ^= S(A,1,4);
	  C[2] ^= S(A,3,2);
	  C[0] ^= S(A,3,0);
	  C[3] ^= S(A,2,3);
	  C[1] ^= S(A,2,1);
	  C[4] ^= S(A,2,4);
	  T[0] = C[2];
	  C[2] = ROL64(C[2], 1);
	  C[2] ^= C[0];
	  C[3] ^= D[3];
	  C[0] = ROL64(C[0], 1);
	  C[0] ^= C[3];
	  C[1] ^= S(A,3,1);
	  C[3] = ROL64(C[3], 1);
	  C[3] ^= C[1];
	  C[4] ^= S(A,3,4);
	  C[1] = ROL64(C[1], 1);
	  C[1] ^= C[4];
	  C[4] = ROL64(C[4], 1);
	  C[4] ^= T[0];
	  D[1] ^= C[2];
	  D[2] ^= C[3];
	  D[1] = ROL64(D[1], 44);
	  D[3] ^= C[4];
	  D[4] ^= C[0];
	  D[2] = ROL64(D[2], 43);
	  D[0] ^= C[1];
	  T[0] = D[1];
	  D[3] = ROL64(D[3], 21);
	  D[1] |= D[2];
	  D[1] ^= D[0];
	  D[4] = ROL64(D[4], 14);
	  D[1] ^= [iotas + 0];
	  iotas += 8;
	  T[1] = D[4];
	  D[4] &= D[3];
	  S(R,0,0) = D[1];
	  D[4] ^= D[2];
	  D[2] = !D[2];
	  S(R,0,2) = D[4];
	  D[2] |= D[3];
	  D[4] = S(A,4,2);
	  D[2] ^= T[0];
	  S(R,0,1) = D[2];
	  T[0] &= D[0];
	  D[1] = S(A,1,4);
	  T[0] ^= T[1];
	  D[2] = S(A,2,0);
	  S(R,0,4) = T[0];
	  T[1] |= D[0];
	  D[0] = S(A,0,3);
	  T[1] ^= D[3];
	  D[3] = S(A,3,1);
	  S(R,0,3) = T[1];
	  D[0] ^= C[4];
	  D[4] ^= C[3];
	  D[0] = ROL64(D[0], 28);
	  D[3] ^= C[2];
	  D[1] ^= C[0];
	  D[4] = ROL64(D[4], 61);
	  D[3] = ROL64(D[3], 45);
	  D[2] ^= C[1];
	  D[1] = ROL64(D[1], 20);
	  T[0] = D[0];
	  D[0] |= D[4];
	  D[2] = ROL64(D[2], 3);
	  D[0] ^= D[3];
	  S(R,1,3) = D[0];
	  T[1] = D[1];
	  D[1] &= T[0];
	  D[0] = S(A,0,1);
	  D[1] ^= D[4];
	  D[4] = !D[4];
	  S(R,1,4) = D[1];
	  D[4] |= D[3];
	  D[1] = S(A,1,2);
	  D[4] ^= D[2];
	  S(R,1,2) = D[4];
	  D[3] &= D[2];
	  D[4] = S(A,4,0);
	  D[3] ^= T[1];
	  S(R,1,1) = D[3];
	  T[1] |= D[2];
	  D[2] = S(A,2,3);
	  T[1] ^= T[0];
	  D[3] = S(A,3,4);
	  S(R,1,0) = T[1];
	  D[2] ^= C[4];
	  D[3] ^= C[0];
	  D[2] = ROL64(D[2], 25);
	  D[1] ^= C[3];
	  D[3] = ROL64(D[3], 8);
	  D[4] ^= C[1];
	  D[1] = ROL64(D[1], 6);
	  D[0] ^= C[2];
	  D[4] = ROL64(D[4], 18);
	  T[0] = D[2];
	  D[2] &= D[3];
	  D[0] = ROL64(D[0], 1);
	  D[3] = !D[3];
	  D[2] ^= D[1];
	  S(R,2,1) = D[2];
	  T[1] = D[4];
	  D[4] &= D[3];
	  D[2] = S(A,2,1);
	  D[4] ^= T[0];
	  S(R,2,2) = D[4];
	  T[0] |= D[1];
	  D[4] = S(A,4,3);
	  T[0] ^= D[0];
	  S(R,2,0) = T[0];
	  D[1] &= D[0];
	  D[1] ^= T[1];
	  S(R,2,4) = D[1];
	  T[1] |= D[0];
	  D[1] = S(A,1,0);
	  T[1] ^= D[3];
	  D[3] = S(A,3,2);
	  S(R,2,3) = T[1];
	  D[0] = S(A,0,4);
	  D[2] ^= C[2];
	  D[3] ^= C[3];
	  D[2] = ROL64(D[2], 10);
	  D[1] ^= C[1];
	  D[3] = ROL64(D[3], 15);
	  D[4] ^= C[4];
	  D[1] = ROL64(D[1], 36);
	  D[0] ^= C[0];
	  D[4] = ROL64(D[4], 56);
	  T[0] = D[2];
	  D[2] |= D[3];
	  D[0] = ROL64(D[0], 27);
	  D[3] = !D[3];
	  D[2] ^= D[1];
	  S(R,3,1) = D[2];
	  T[1] = D[4];
	  D[4] |= D[3];
	  D[4] ^= T[0];
	  S(R,3,2) = D[4];
	  T[0] &= D[1];
	  T[0] ^= D[0];
	  S(R,3,0) = T[0];
	  D[1] |= D[0];
	  D[1] ^= T[1];
	  S(R,3,4) = D[1];
	  D[0] &= T[1];
	  D[0] ^= D[3];
	  S(R,3,3) = D[0];
	  C[3] ^= S(A,0,2);
	  C[4] ^= S(A,1,3);
	  C[3] = ROL64(C[3], 62);
	  C[2] ^= S(A,4,1);
	  C[4] = ROL64(C[4], 55);
	  C[0] ^= S(A,2,4);
	  C[2] = ROL64(C[2], 2);
	  C[1] ^= S(A,3,0);
	  A, R = swap(A, R);
	  C[0] = ROL64(C[0], 39);
	  C[1] = ROL64(C[1], 41);
	  T[0] = C[3];
	  C[3] &= C[4];
	  C[4] = !C[4];
	  C[3] ^= C[2];
	  S(A,4,4) = C[3];
	  T[1] = C[0];
	  C[0] &= C[4];
	  C[0] ^= T[0];
	  S(A,4,0) = C[0];
	  T[0] |= C[2];
	  T[0] ^= C[1];
	  S(A,4,3) = T[0];
	  C[2] &= C[1];
	  C[2] ^= T[1];
	  S(A,4,2) = C[2];
	  C[1] |= T[1];
	  C[1] ^= C[4];
	  S(A,4,1) = C[1];
	  C[4] = C[3];
	  C[3] = T[0];

    _, _, _, _, zf = #x86_TEST_8(iotas,255);
  } (!zf)

  S(A,0,1) = #x86_NOT(S(A,0,1));
  S(A,0,2) = #x86_NOT(S(A,0,2));
  S(A,1,3) = #x86_NOT(S(A,1,3));
  S(A,2,2) = #x86_NOT(S(A,2,2));
  S(A,3,2) = #x86_NOT(S(A,3,2));
  S(A,4,0) = #x86_NOT(S(A,4,0));

	iotas -= 192;

  restore(A,R)

  return A, iotas;
}
