// TODO: zero stuff better : set0 for u256

#define B(base,x) [base + 8*(x)]
#define B8(base,x) (u8)[base + (x)]
#define B256(b,i,o) (u256)[b + i*32-o]

#include "keccak_f-openssl.jazz"

u64 g_zero = 0;

fn init_state() -> reg u256[7]
{
  inline int i;
  reg u256[7] state;

  state[0] = #x86_VPBROADCAST_4u64(g_zero);

  for i=1 to 7
  { state[i] = state[0]; }

  return state;
}


fn a_jagged_f(inline int i) -> inline int
{
  inline int r;
  if(i == 0 ){ r = 0;  }
  if(i == 1 ){ r = 4;  }
  if(i == 2 ){ r = 5;  }
  if(i == 3 ){ r = 6;  }
  if(i == 4 ){ r = 7;  }
  if(i == 5 ){ r = 10; }
  if(i == 6 ){ r = 24; }
  if(i == 7 ){ r = 13; }
  if(i == 8 ){ r = 18; }
  if(i == 9 ){ r = 23; }
  if(i == 10){ r = 8;  }
  if(i == 11){ r = 16; }
  if(i == 12){ r = 25; }
  if(i == 13){ r = 22; }
  if(i == 14){ r = 15; }
  if(i == 15){ r = 11; }
  if(i == 16){ r = 12; }
  if(i == 17){ r = 21; }
  if(i == 18){ r = 26; }
  if(i == 19){ r = 19; }
  if(i == 20){ r = 9;  }
  if(i == 21){ r = 20; }
  if(i == 22){ r = 17; }
  if(i == 23){ r = 14; }
  if(i == 24){ r = 27; }
  return r;
}


fn keccak_1600_add_full_block(
  reg u256[7] state,
  reg u64 in,
  reg u64 inlen,
  inline int rate_in_bytes
) -> reg u256[7], reg u64, reg u64
{
  inline int i j;
  stack u64[28] s_state;
  reg u256 zero;
  reg u64 t;

  zero = #x86_VPBROADCAST_4u64(g_zero);
  for i=0 to 7
  { s_state[u256 i] = zero; }

  t = [in + 8*0];
  s_state[0] = t;
  s_state[1] = t;
  s_state[2] = t;
  s_state[3] = t;

  for i = 1 to (rate_in_bytes / 8) 
  { t = [in + 8*i];
    j = a_jagged_f(i);
    s_state[j] = t;
  }

  for i = 0 to 7
  { state[i] ^= s_state[u256 i]; }

  in += rate_in_bytes;
  inlen -= rate_in_bytes;

  return state, in, inlen;
}



fn keccak_1600_add_final_block(
  reg u256[7] state,
  reg u64 a_jagged,
  reg u64 in,
  reg u64 inlen,
  inline int suffix,
  inline int rate_in_bytes
) -> reg u256[7]
{
  inline int i;
  stack u64[28] s_state;
  reg u256 zero;
  reg u64 j l t inlen8;
  reg u8 c;

  zero = #x86_VPBROADCAST_4u64(g_zero);
  for i=0 to 7
  { s_state[u256 i] = zero; }

  inlen8 = inlen;
  inlen8 >>= 3;
  j = 0;
  while ( j < inlen8 )
  {
    t = [in + 8*j];
    l = B(a_jagged, j);
    s_state[(int) l] = t;
    j += 1;
  }
  l = B(a_jagged, j);

  j <<= 3;
  l <<= 3;

  // inlen4 ?

  while ( j < inlen )
  {
    c = (u8)[in + j];
    s_state[u8 (int) l] = c;
    j += 1;
    l += 1;
  }

  s_state[u8 (int) l] = suffix;

  j  = (rate_in_bytes-1) >> 3;
  l  = B(a_jagged, j);
  l <<= 3;
  l += ((rate_in_bytes-1) & 0x7);

  s_state[u8 (int) l] ^= 0x80;

  //
  t = s_state[0];
  s_state[1] = t;
  s_state[2] = t;
  s_state[3] = t;
  //

  for i = 0 to 7
  { state[i] ^= s_state[u256 i]; }

  return state;
}



// obs: @pre: len <= rate_in_bytes
fn keccak_1600_xtr_block(
  reg u256[7] state,
  reg u64 a_jagged,
  reg u64 out,
  reg u64 len
) -> reg u64
{
  inline int i;
  stack u64[28] s_state;
  reg u64 j l t len8;
  reg u8 c;

  for i = 0 to 7
  { s_state[u256 i] = state[i]; }

  len8 = len;
  len8 >>= 3;
  j = 0;
  while ( j < len8 )
  {
    l = B(a_jagged, j);
    t = s_state[(int) l];
    [out + 8*j] = t;
    j += 1;
  }
  l = B(a_jagged, j);

  j <<= 3;
  l <<= 3;

  // inlen4 ?

  while ( j < len )
  {
    c = s_state[u8 (int) l];
    (u8)[out + j] = c;
    j += 1;
    l += 1;
  }

  out += len;

  return out;
}



fn keccak_1600_absorb(
  reg u256[7] state,
  reg u64 rhotates_left,
  reg u64 rhotates_right,
  reg u64 iotas,
  reg u64 a_jagged,
  reg u64 in inlen,
  inline int suffix,
  inline int rate_in_bytes
) -> reg u256[7]
{

  // intermediate blocks
  while ( inlen >= rate_in_bytes )
  {
    state, in, inlen = keccak_1600_add_full_block(state, in, inlen, rate_in_bytes);
    state = keccak_f(state, rhotates_left, rhotates_right, iotas);
  }

  // final block
  state = keccak_1600_add_final_block(state, a_jagged, in, inlen, suffix, rate_in_bytes);
  state = keccak_f(state, rhotates_left, rhotates_right, iotas);

  return state;
}



fn keccak_1600_squeeze(
  reg u256[7] state,
  reg u64 rhotates_left,
  reg u64 rhotates_right,
  reg u64 iotas,
  reg u64 a_jagged,
  reg u64 out,
  inline int rate_in_bytes,
  inline int i_hash_bytes
)
{
  reg u64 hash_bytes;

  hash_bytes = i_hash_bytes;

  // intermediate blocks
  while ( hash_bytes >= rate_in_bytes )
  {    
    out = keccak_1600_xtr_block(state, a_jagged, out, rate_in_bytes);
    state = keccak_f(state, rhotates_left, rhotates_right, iotas);
    hash_bytes -= rate_in_bytes;
  }

  // final block
  out = keccak_1600_xtr_block(state, a_jagged, out, hash_bytes);
}



fn keccak_1600(
  reg u64 out,   // output pointer with at least hash_bytes available
  reg u64 in,    // input pointer with inlen bytes
  reg u64 inlen, // input length in bytes
  reg u64 m,     // external memory: it contains 4 pointers: (rhotates_left, rhotates_right, iotas, a_jagged)
  inline int suffix,
  inline int rate,
  inline int capacity,
  inline int hash_bytes
)
{
  reg u64 rhotates_left rhotates_right iotas a_jagged;
  reg u256[7] state;

  state          = init_state();
  rhotates_left  = [m + 8*0];
  rhotates_right = [m + 8*1];
  iotas          = [m + 8*2];
  a_jagged       = [m + 8*3];

  // absorb
  state = keccak_1600_absorb(state, rhotates_left, rhotates_right, iotas, a_jagged,
                             in, inlen, suffix, (rate/8));

  // squeeze
  keccak_1600_squeeze(state, rhotates_left, rhotates_right, iotas, a_jagged,
                      out, (rate/8), hash_bytes);
}

