#ifndef CRYPTO_HASH_SHAKE128_AVX2
#define CRYPTO_HASH_SHAKE128_AVX2

#ifdef KECCAK1600_SPECIFIC_IMPLEMENTATIONS
#define KECCAK1600_ADD_FULL_BLOCK_IMPLEMENTATION 1

inline fn __add_full_block(
  reg u256[7] state,
  stack u64[28] s_state,
  reg ptr u64[25] _not_used_,
  reg u64 in inlen,
  reg u64 rate
) -> reg u256[7], stack u64[28], reg u64, reg u64
{
  reg u256 a00 a01 a11 a21 a31 a32;
  reg u256 t11 t41 t31 t21;
  reg u256 zero;
  reg u64 r10 r20 r30 r40;
  stack u64[4] s20;

  r10 = [in + 8*5];
  r20 = [in + 8*10];
  r30 = [in + 8*15];
  r40 = [in + 8*20];

  s20[0] = r20;
  s20[1] = r40;
  s20[2] = r10;
  s20[3] = r30;

  a00 = #VPBROADCAST_4u64([in + 8*0]); // (0,0) (0,0) (0,0) (0,0)
  a01 = (u256)[in + 8*1];                  // (0,4) (0,3) (0,2) (0,1)

  state[0] ^= a00;
  state[1] ^= a01;
  state[2] ^= s20[u256 0];
 
  zero = #set0_256();

  a11 = (u256)[in + 8*6 ]; // (1,4) (1,3) (1,2) (1,1)
  a21 = (u256)[in + 8*11]; // (2,4) (2,3) (2,2) (2,1)
  a31 = (u256)[in + 8*16]; // (3,4) (3,3) (3,2) (3,1)

  a32 = #VPBLEND_8u32(a31, zero, (8u1)[1,1,0,0,0,0,1,1]); //  ___  (3,3) (3,2)  ___
  a31 = #VPBLEND_8u32(a31, zero, (8u1)[0,0,1,1,1,1,0,0]); // (3,4)  ___   ___  (3,1)
  t41 = #VPBLEND_8u32(a21, a11,  (8u1)[1,1,0,0,0,0,1,1]); // (1,4) (2,3) (2,2) (1,1)
  t31 = #VPBLEND_8u32(a21, a11,  (8u1)[0,0,1,1,1,1,0,0]); // (2,4) (1,3) (1,2) (2,1)
  t11 = #VPBLEND_8u32(t41, a32,  (8u1)[1,1,1,1,0,0,0,0]); //  ___  (3,3) (2,2) (1,1)
  t21 = #VPBLEND_8u32(t31, a31,  (8u1)[1,1,0,0,1,1,0,0]); // (3,4) (1,3)  ___  (2,1)
  t31 = #VPBLEND_8u32(t31, a31,  (8u1)[0,0,1,1,0,0,1,1]); // (2,4)  ___  (1,2) (3,1)

  state[6] ^= t11;

  t41 = #VPBLEND_8u32(t41, a32,  (8u1)[0,0,0,0,1,1,1,1]); // (1,4) (2,3) (3,2)   ___

  state[4] ^= t21;
  state[3] ^= t31;
  state[5] ^= t41;

  in += rate;
  inlen -= rate;

  return state, s_state, in, inlen;
}
#endif

#include "crypto_hash/keccak1600/avx2/keccak1600.jazz"

inline fn __shake128_avx2(reg u64 out outlen in inlen)
{
  reg u64 rate;
  reg u8 trail_byte;

  trail_byte = 0x1F;
  rate = (1344/8);

  __keccak1600_avx2(out, outlen, in, inlen, trail_byte, rate);
}

#ifdef EXPORT

export fn shake128_avx2(reg u64 out outlen in inlen)
{
  __shake128_avx2(out, outlen, in, inlen);
}

#endif

#endif
