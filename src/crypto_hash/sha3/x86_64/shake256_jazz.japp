#include "keccak2x.jazz"

//
// EXTERNAL INTERFACES
//


/**
  * Function that initializes the state of the Keccak[1088, 512] sponge function, and
  * performs both the Absorbing and Squeeze phases.
  *
  * @param  datain		Pointer to the input data.
  * @param  datainbitLen	The number of bits provided in the input data.
  * @param  dataout		Pointer to the output buffer.
  * @param  dataoutbitLen	The number of bits provided in the input data.
  * @pre    datainbitLen and dataoutbitLen are multiple of 8 (remainders ignored)
  * @pre    input data and output buffers do not overlap
  */
export
fn keccak_shake256_jazz(reg u64 datain datainLen dataout dataoutLen) {
  stack u64[25] state;
  stack u64[24] round_constants;
  stack u64 dataout_spill dataoutLen_spill;

  dataout_spill = dataout;
  dataoutLen_spill = dataoutLen;
  state, round_constants = keccak_init();

  // ABSORB PHASE
  datainLen >>= 3; // input data length in bytes
  state = shake_absorb(state, round_constants, datain, datainLen);

  // SQUEEZE PHASE
  dataout = dataout_spill;
  dataoutLen = dataoutLen_spill;
  dataoutLen >>= 3; // output buffer size in bytes
  keccak_squeeze(state, round_constants, dataout, dataoutLen);
}





//
// SUPERCOP INTERFACE
//
//
///**
//  * Function to initialize the state of the Keccak[r, c] sponge function.
//  * The sponge function is set to the absorbing phase.
//  * @param  state       Pointer to the state of the sponge function to be initialized.
//  * @param  rate        The value of the rate r.
//  * @param  capacity    The value of the capacity c.
//  * @pre    One must have r+c=1600 and the rate a multiple of 64 bits in this implementation.
//  * @return Zero if successful, 1 otherwise.
//  */
//int InitSponge(spongeState *state, unsigned int rate, unsigned int capacity);
///**
//  * Function to give input data for the sponge function to absorb.
//  * @param  state       Pointer to the state of the sponge function initialized by InitSponge().
//  * @param  data        Pointer to the input data. 
//  *                     When @a databitLen is not a multiple of 8, the last bits of data must be
//  *                     in the least significant bits of the last byte.
//  * @param  databitLen  The number of input bits provided in the input data.
//  * @pre    In the previous call to Absorb(), databitLen was a multiple of 8.
//  * @pre    The sponge function must be in the absorbing phase,
//  *         i.e., Squeeze() must not have been called before.
//  * @return Zero if successful, 1 otherwise.
//  */
//int Absorb(spongeState *state, const unsigned char *data, unsigned long long databitlen);
///**
//  * Function to squeeze output data from the sponge function.
//  * If the sponge function was in the absorbing phase, this function 
//  * switches it to the squeezing phase.
//  * @param  state       Pointer to the state of the sponge function initialized by InitSponge().
//  * @param  output      Pointer to the buffer where to store the output data.
//  * @param  outputLength    The number of output bits desired.
//  *                     It must be a multiple of 8.
//  * @return Zero if successful, 1 otherwise.
//  */
//int Squeeze(spongeState *state, unsigned char *output, unsigned long long outputLength);
