/* u256 rhotates_left[6] = {
      0x0000000000000029000000000000002400000000000000120000000000000003
    , 0x000000000000001b000000000000001c000000000000003e0000000000000001
    , 0x000000000000002700000000000000380000000000000006000000000000002d
    , 0x00000000000000080000000000000037000000000000003d000000000000000a
    , 0x00000000000000140000000000000019000000000000000f0000000000000002
    , 0x000000000000000e0000000000000015000000000000002b000000000000002c 
    }
(*	.quad	3,	18,	36,	41	# [2][0] [4][0] [1][0] [3][0] 
	.quad	1,	62,	28,	27	# [0][1] [0][2] [0][3] [0][4] 
	.quad	45,	6,	56,	39	# [3][1] [1][2] [4][3] [2][4]
	.quad	10,	61,	55,	8	# [2][1] [4][2] [1][3] [3][4]
	.quad	2,	15,	25,	20	# [4][1] [3][2] [2][3] [1][4]
	.quad	44,	43,	21,	14	# [1][1] [2][2] [3][3] [4][4] *)
u256 rhotates_right[6] = {
      0x0000000000000017000000000000001c000000000000002e000000000000003d
    , 0x000000000000002500000000000000240000000000000002000000000000003f
    , 0x00000000000000190000000000000008000000000000003a0000000000000013
    , 0x0000000000000038000000000000000900000000000000030000000000000036
    , 0x000000000000002c00000000000000270000000000000031000000000000003e
    , 0x0000000000000032000000000000002b00000000000000150000000000000014
}
(*
	.quad	64-3,	64-18,	64-36,	64-41
	.quad	64-1,	64-62,	64-28,	64-27
	.quad	64-45,	64-6,	64-56,	64-39
	.quad	64-10,	64-61,	64-55,	64-8
	.quad	64-2,	64-15,	64-25,	64-20
	.quad	64-44,	64-43,	64-21,	64-14 *)
u256 iotas[24] = {
	  0x0000000000000001000000000000000100000000000000010000000000000001
	, 0x0000000000008082000000000000808200000000000080820000000000008082
	, 0x800000000000808a800000000000808a800000000000808a800000000000808a
	, 0x8000000080008000800000008000800080000000800080008000000080008000
	, 0x000000000000808b000000000000808b000000000000808b000000000000808b
	, 0x0000000080000001000000008000000100000000800000010000000080000001
	, 0x8000000080008081800000008000808180000000800080818000000080008081
	, 0x8000000000008009800000000000800980000000000080098000000000008009
	, 0x000000000000008a000000000000008a000000000000008a000000000000008a
	, 0x0000000000000088000000000000008800000000000000880000000000000088
	, 0x0000000080008009000000008000800900000000800080090000000080008009
	, 0x000000008000000a000000008000000a000000008000000a000000008000000a
	, 0x000000008000808b000000008000808b000000008000808b000000008000808b
	, 0x800000000000008b800000000000008b800000000000008b800000000000008b
	, 0x8000000000008089800000000000808980000000000080898000000000008089
	, 0x8000000000008003800000000000800380000000000080038000000000008003
	, 0x8000000000008002800000000000800280000000000080028000000000008002
	, 0x8000000000000080800000000000008080000000000000808000000000000080
	, 0x000000000000800a000000000000800a000000000000800a000000000000800a
	, 0x800000008000000a800000008000000a800000008000000a800000008000000a
	, 0x8000000080008081800000008000808180000000800080818000000080008081
	, 0x8000000000008080800000000000808080000000000080808000000000008080
	, 0x0000000080000001000000008000000100000000800000010000000080000001
	, 0x8000000080008008800000008000800880000000800080088000000080008008
} */

inline fn KeccakP1600_Permute_24rounds(reg u256 A00 A01 A20 A31 A21 A41 A11) -> 
      reg u256, reg u256, reg u256, reg u256, reg u256, reg u256, reg u256 {
   reg u64 i; 
   reg u256 C00, C14; 
   reg u256 D00, D14;
   reg u256[5] T;
   reg bool zf;
   i = 24;
   while (true) {
	/* ######################################### Theta */
	C00  = #x86_VPSHUFD_256(A20, 0x4e /*0b01001110 */);
	C14  = A41 ^4u64 A31 ;
	T[2] = A21 ^4u64 A11 ;
	C14  = C14 ^4u64 A01 ;
	C14  = C14 ^4u64 T[2];

	T[4] = #x86_VPERMQ(C14, 0x93 /* 0b10010011 */);
	C00 = C00 ^4u64 A20;
	T[0] = #x86_VPERMQ(C00, 0x4e /* 0b01001110 */);


    T[1] = C14 >>4u64 63; 
    T[2] = C14 +4u64 C14;
	T[1] = T[1] |4u64 T[2];

	D14 = #x86_VPERMQ(T[1], 0x39 /*0b00111001 */);
	D00 = T[1] ^4u64 T[4];
	D00 = #x86_VPERMQ(D00, 0x00 /*0b00000000 */);

	C00 = C00 ^4u64 A00;
	C00 = C00 ^4u64 T[0];

    T[0] = C00 >>4u64 63; 
    T[1] = C00 +4u64 C00;
	T[1] = T[1] |4u64 T[0];

	A20 = A20 ^4u64 D00;
	A00 = A00 ^4u64 D00;

    D14  = #x86_VPBLENDD_256(D14,T[1], (4u2)[3,0,0,0] /* 0b11000000 */);
    T[4] = #x86_VPBLENDD_256(T[4],C00, (4u2)[0,0,0,3] /* 0b00000011 */);
	D14 = D14 ^4u64 T[4];

    (zf,_,_,_,i) = #x86_DEC(i);
    if (zf) { break; };
   }
   return A00, A01, A20, A31, A21, A41, A11;
}

export fn wrapper() -> reg u64 {
	reg u256 A00, A01, A20, A31, A21, A41, A11;
	reg u64 r;
	//A00 = 0;
	//A01 = 0;
	//A20 = 0;
	//A31 = 0;
	//A21 = 0;
	//A41 = 0;
	//A11 = 0;
	A00, A01, A20, A31, A21, A41, A11 = KeccakP1600_Permute_24rounds(A00, A01, A20, A31, A21, A41, A11);
	r = #x86_VPEXTR_64(A00, 0);
    return  r;
}













