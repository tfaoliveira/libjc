#ifndef KECCAK1600_REF
#define KECCAK1600_REF

#include "crypto_core/keccakf160064bits/ref/keccakf1600.jazz"

fn st0() -> stack u64[25] 
{
  inline int i;
  stack u64[25] state;

  for i = 0 to 25
  { state[i] = 0; }

  return state;
}


fn add_full_block(
  stack u64[25] state,
  reg u64 in,
  reg u64 inlen,
  reg u64 r8
) -> stack u64[25], reg u64, reg u64
{
  reg u64 i t r64;

  r64 = r8;
  r64 >>= 3;
  i = 0;
  while (i < r64)
  {
    t = [in + 8 * i];
    state[(int) i] ^= t;
    i = i + 1;
  }

  in += r8;
  inlen -= r8;

  return state, in, inlen;
}


fn add_final_block(
  stack u64[25] state,
  reg u64 in,
  reg u64 inlen,
  reg u8 trail_byte,
  reg u64 r8
) -> stack u64[25] 
{
  reg u64 i, t, inlen8;
  reg u8 c;

  inlen8 = inlen;
  inlen8 >>= 3;
  i = 0;
  while ( i < inlen8)
  {
    t = [in + 8*i];
    state[(int) i] ^= t;
    i = i + 1;
  }

  i <<= 3;
  while (i < inlen)
  {
    c = (u8)[in + i];
    state[u8 (int) i] ^= c;
    i = i + 1;
  }

  state[u8 (int) i] ^= trail_byte;

  i = r8;
  i -= 1;
  state[u8 (int) i] ^= 0x80;

  return state;
}


fn xtr_full_block(
  stack u64[25] state,
  reg u64 out,
  reg u64 outlen,
  reg u64 rate
) -> reg u64, reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while (i < rate64)
  {
    t = state[(int) i];
    [out + 8 * i] = t;
    i = i + 1;
  }
  
  out += rate;
  outlen -= rate;

  return out, outlen;
}


fn xtr_bytes(
  stack u64[25] state,
  reg u64 out,
  reg u64 outlen
) 
{
  reg u64 i t outlen8;
  reg u8 c;

  outlen8 = outlen;
  outlen8 >>= 3;
  i = 0;
  while (i < outlen8 )
  {
    t = state[(int) i];
    [out + 8 * i] = t;
    i = i + 1;
  }
  i <<= 3;

  while (i < outlen)
  {
    c = state[u8 (int) i];
    (u8)[out + i] = c;
    i = i + 1;
  }
}


fn __keccak1600_ref(reg u64 out outlen in inlen, reg u8 trail_byte, reg u64 rate)
{
  stack u64[25] state;
  stack u64 s_out, s_outlen, s_in, s_inlen, s_rate;
  stack u8 s_trail_byte;

  s_out = out;
  s_outlen = outlen;
  s_trail_byte = trail_byte;

  state = st0();

  while ( inlen >= rate )
  {
    state, in, inlen = add_full_block(state, in, inlen, rate);

    s_in = in;
    s_inlen = inlen;
    s_rate = rate;

    state = __keccakf1600_ref(state);

    inlen = s_inlen;
    in = s_in;
    rate = s_rate;
  }

  trail_byte = s_trail_byte;
  state = add_final_block(state, in, inlen, trail_byte, rate);

  outlen = s_outlen;

  while ( outlen > rate )
  {
    s_outlen = outlen;
    s_rate = rate;

    state = __keccakf1600_ref(state);

    out = s_out;
    outlen = s_outlen;
    rate = s_rate;

    out, outlen = xtr_full_block(state, out, outlen, rate);
    s_outlen = outlen;
    s_out = out;
  }

  state = __keccakf1600_ref(state);
  out = s_out;
  outlen = s_outlen;

  xtr_bytes(state, out, outlen);
}

#endif
