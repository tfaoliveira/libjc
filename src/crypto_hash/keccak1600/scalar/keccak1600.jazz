#ifndef KECCAK1600_SCALAR
#define KECCAK1600_SCALAR

#include "crypto_core/keccakf160064bits/scalar/keccakf1600.jazz"

//TODO include utils and use s2r/r2s; check proof first 
fn spill_2(reg u64 a b) -> stack u64, stack u64
{
  stack u64 sa sb;
  sa = a;
  sb = b;
  return sa, sb;
}


fn spill_3(reg u64 a b c) -> stack u64, stack u64, stack u64
{
  stack u64 sa sb sc;
  sa = a;
  sb = b;
  sc = c;
  return sa, sb, sc;
}


fn load_2(stack u64 sa sb) -> reg u64, reg u64
{
  reg u64 a b;
  a = sa;
  b = sb;
  return a, b;
}


fn load_3(stack u64 sa sb sc) -> reg u64, reg u64, reg u64
{
  reg u64 a b c;
  a = sa;
  b = sb;
  c = sc;
  return a, b, c;
}


fn keccak_init() -> stack u64[25]
{
  stack u64[25] state;
  reg u64 i t;

  _,_,_,_,_, t = #set0();
  i = 0;
  while (i < 25)
  { state[(int)i] = t;
    i += 1;
  }

  return state;
}


fn add_full_block(
  stack u64[25] state,
  reg u64 in,
  reg u64 inlen,
  reg u64 rate
) -> stack u64[25], reg u64, reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while( i < rate64)
  {
    t = [in + 8*i];
    state[(int)i] ^= t;
    i+=1;
  }

  in += rate;
  inlen -= rate;

  return state, in, inlen;
}


// obs: @pre: inlen < rate_in_bytes
fn add_final_block(
  stack u64[25] state,
  reg   u64 in,
  reg   u64 inlen,
  reg   u8  trail_byte,
  reg   u64 rate
) -> stack u64[25]
{
  reg u64 i t inlen8;
  reg u8 c;

  inlen8 = inlen;
  inlen8 >>= 3;
  i = 0;
  while ( i < inlen8 )
  {
    t = [in + 8*i];
    state[(int)i] ^= t;
    i += 1;
  }

  i <<= 3;
  while ( i < inlen )
  {
    c = (u8)[in + i];
    state[u8 (int)i] ^= c;
    i += 1;
  }

  state[u8 (int)i] ^= trail_byte;

  i = rate;
  i -= 1;
  state[u8 (int)i] ^= 0x80;

  return state;
}


fn absorb(
  stack u64[25] state,
  reg   u64 in inlen,
  stack u8  s_trail_byte,
  reg   u64 rate // rate already in bytes -- it is returned bc of spills
) -> stack u64[25], reg u64
{
  stack u64 s_in s_inlen s_rate;
  reg u8 trail_byte;
  reg u64 t;

  // intermediate blocks
  while ( inlen >= rate )
  {
    state, in, inlen = add_full_block(state, in, inlen, rate);
    s_in, s_inlen, s_rate = spill_3(in, inlen, rate);

    state = __keccakf1600_scalar(state);
    in, inlen, rate = load_3(s_in, s_inlen, s_rate);
  }

  // final block
  trail_byte = s_trail_byte;

  state = add_final_block(state, in, inlen, trail_byte, rate);

  return state, rate;
}


fn xtr_full_block(
  stack u64[25] state,
  reg u64 out,
  reg u64 outlen,
  reg u64 rate
) -> reg u64, reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while ( i < rate64 )
  {
    t = state[(int)i];
    [out + 8*i] = t;
    i += 1;
  }

  out += rate;
  outlen -= rate;

  return out, outlen;
}


fn xtr_bytes(
  stack u64[25] state,
  reg u64 out,
  reg u64 outlen
) -> reg u64
{
  reg u64 i t outlen8;
  reg u8 c;

  outlen8 = outlen;
  outlen8 >>= 3;
  i = 0;
  while ( i < outlen8 )
  {
    t = state[(int)i];
    [out + 8*i] = t;
    i += 1;
  }
  i <<= 3;

  while ( i < outlen )
  {
    c = state[u8 (int)i];
    (u8)[out + i] = c;
    i += 1;
  }

  out += outlen;
  return out;
}


fn squeeze(
  stack u64[25] state,
  stack u64 s_out,
  reg   u64 outlen,
  reg   u64 rate
)
{
  reg u64 out;
  stack u64 s_outlen s_rate;

  // intermediate blocks
  while ( outlen > rate )
  {
    s_outlen, s_rate = spill_2(outlen, rate);
    state = __keccakf1600_scalar(state);
    out, outlen, rate = load_3(s_out, s_outlen, s_rate);

    out, outlen = xtr_full_block(state, out, outlen, rate);
    s_out = out;
  }

  s_outlen = outlen;
  state = __keccakf1600_scalar(state);
  out, outlen = load_2(s_out, s_outlen);

  out = xtr_bytes(state, out, outlen);
}


fn __keccak1600_scalar(reg u64 out outlen in inlen, reg u8 trail_byte, reg u64 rate)
{
  stack u64[25] state;
  stack u64 s_out s_outlen;
  stack u8 s_trail_byte;

  s_out = out;
  s_outlen = outlen;
  s_trail_byte = trail_byte;

  state = keccak_init();

  // absorb
  state, rate = absorb(state, in, inlen, s_trail_byte, rate);

  // squeeze
  outlen = s_outlen;
  squeeze(state, s_out, outlen, rate);
}

#endif
