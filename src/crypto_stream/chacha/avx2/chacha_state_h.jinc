
//require "crypto_stream/chacha/avx2/chacha_globals.jinc"
require "chacha_globals.jinc"

// nonce : 8 bytes
// key : 32 bytes
// counter : 8 bytes (starts at 0)
inline fn __init_h_avx2(reg u64 nonce key) -> reg u256[4]
{
  reg u256[4] st;
  reg u128 t;

  st[0] = CHACHA_SIGMA_H_AVX2;

  st[1] = #VPBROADCAST_2u128((u128)[key + 0]);
  st[2] = #VPBROADCAST_2u128((u128)[key + 16]);

  t = #set0_128();
  t = #VPINSR_2u64(t, (u64)[nonce + 0], 1);
  st[3] = #set0_256();
  st[3] = #VINSERTI128(st[3], t, 0);
  st[3] = #VINSERTI128(st[3], t, 1);
  st[3] +4u64= CHACHA_P0100_H_AVX2;

  // st:
  //  st[0] = { sigma     , sigma      }
  //  st[1] = { k[127:0]  , k[127:0]   }
  //  st[2] = { k[255:128], k[255:128] }
  //  st[3] = { n,  1     , n, 0       }
  return st;
}


// increments 64-bit counters
inline fn __increment_counter0404_h_avx2(reg u256[4] st) -> reg u256[4]
{
  st[3] +4u64= CHACHA_P0404_H_AVX2;
  return st;
}


// increments 64-bit counters
inline fn __increment_counter0202_h_avx2(reg u256[4] st) -> reg u256[4]
{
  st[3] +4u64= CHACHA_P0202_H_AVX2;
  return st;
}


