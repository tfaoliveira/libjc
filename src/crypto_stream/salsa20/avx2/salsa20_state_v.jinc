
//require "crypto_stream/salsa20/avx2/salsa20_globals.jinc"
require "salsa20_globals.jinc"

// nonce : 8 bytes
// key : 32 bytes
// counter : 8 bytes (starts at 0)
inline fn __init_v_avx2(reg u64 nonce key) -> stack u256[16]
{
  inline int i;
  stack u256[16] _st;
  reg u256[16] st;

  // state[1,2,3,4, 11,12,13,14] = key[0,1,2,3, 4,5,6,7]
  for i=0 to 4
  { st[i+1] = #VPBROADCAST_8u32((u32)[key + i*4]); }

  for i=4 to 8
  { st[i+7] = #VPBROADCAST_8u32((u32)[key + i*4]); }

  // state[0,5,10,15] = sigma[0,1,2,3]
  for i=0 to 4
  { st[i*5] = SALSA20_SIGMA_V_AVX2[i]; }

  // state[6,7] = nonce[0,1]
  for i=0 to 2
  { st[i+6] = #VPBROADCAST_8u32((u32)[nonce + i*4]); }

  // state[8,9] = 0
  st[8] = SALSA20_P76543210_V_AVX2;
  st[9] = #set0_256();

  _st = #copy(st);

  //  _st:
  //   _st[0]  = { ... , sigma0    , sigma0     }
  //   _st[1]  = { ... , k[31:0]   , k[31:0]    }
  //   _st[2]  = { ... , k[63:32]  , k[63:32]   }
  //   _st[3]  = { ... , k[95:64]  , k[95:64]   }
  //   _st[4]  = { ... , k[127:96] , k[127:96]  }
  //   _st[5]  = { ... , sigma1    , sigma1     }
  //   _st[6]  = { ... , n[31:0]   , n[31:0]    }
  //   _st[7]  = { ... , n[63:32]  , n[63:32]   }
  //   _st[8]  = { ... , 1         , 0          }
  //   _st[9]  = { ... , 0         , 0          }
  //   _st[10] = { ... , sigma2    , sigma2     }
  //   _st[11] = { ... , k[...]    , k[...]     }
  //   _st[12] = { ... , k[...]    , k[...]     }
  //   _st[13] = { ... , k[...]    , k[...]     }
  //   _st[14] = { ... , k[...]    , k[...]     }
  //   _st[15]  = { ... , sigma3   , sigma3     }

  return _st;
}


// increments 64-bit counters
inline fn __increment_counter_v_avx2(stack u256[16] st) -> stack u256[16]
{
  reg u256 a b x y;
  
  x = st[8]; //6 G 4 E 2 C 0 A
  y = st[9]; //7 H 5 F 3 D 1 B  
  
  a = #VPUNPCKL_8u32(x, y); // 5 4 F E 1 0 B A
  b = #VPUNPCKH_8u32(x, y); // 7 6 H G 3 2 D C
  
  a +4u64= SALSA20_P8888_V_AVX2; 
  b +4u64= SALSA20_P8888_V_AVX2;
  
  x = #VPUNPCKL_8u32(a, b); // H F G E D B C A
  y = #VPUNPCKH_8u32(a, b); // 7 5 6 4 3 1 2 0
  
  a = #VPUNPCKL_8u32(x, y); // 6 G 4 E 2 C 0 A
  b = #VPUNPCKH_8u32(x, y); // 7 H 5 F 3 D 1 B
  
  st[8] = a;
  st[9] = b;
  
  return st;
}


