#ifndef CRYPTO_STREAM_SALSA20_R8_AVX2
#define CRYPTO_STREAM_SALSA20_R8_AVX2

#include "crypto_core/salsa20/ref/salsa20.jazz"
#include "crypto_stream/common/chachasalsa20/avx2/r8.jinc"

u256 SALSA20_P8_AVX2 = (4u64)[8,8,8,8];
u256 SALSA20_CI_AVX2 = (8u32)[7,6,5,4,3,2,1,0];
u32[4] SALSA20_SIGMA_AVX2 = {0x61707865, 0x3320646e, 0x79622d32, 0x6b206574};

//
inline fn __salsa20_swap2_avx2(reg u256[16] state, stack u256 state0 state1, inline int a b c d) -> reg u256[16], stack u256, stack u256
{
  stack u256 state2 state3;

  state2 = state[c];
  state3 = state[d];

  state[a] = state0;
  state[b] = state1;

  return state, state2, state3;
}

inline fn __salsa20_load2_avx2(reg u256[16] state, stack u256 state0 state1, inline int a b) -> reg u256[16]
{
  state[a] = state0;
  state[b] = state1;
  return state;
}

inline fn __salsa20_store2_avx2(reg u256[16] state, inline int a b) -> reg u256[16]
{
  stack u256 state0 state1;

  state0 = state[a];
  state1 = state[b];

  return state;
}

//
inline fn __salsa20_init_0_x8_avx2(reg u64 _nonce _key) -> reg u256[16]
{
  inline int i;
  reg u256[16] state;

  // state[1,2,3,4, 11,12,13,14] = key[0,1,2,3, 4,5,6,7]
  for i=0 to 4
  { state[i+1] = #VPBROADCAST_8u32((u32)[_key + i*4]); }

  for i=4 to 8
  { state[i+7] = #VPBROADCAST_8u32((u32)[_key + i*4]); }

  // state[0,5,10,15] = sigma[0,1,2,3]
  for i=0 to 4
  { state[i*5] = #VPBROADCAST_8u32(SALSA20_SIGMA_AVX2[i]); }

  // state[6,7] = nonce[0,1]
  for i=0 to 2
  { state[i+6] = #VPBROADCAST_8u32((u32)[_nonce + i*4]); }

  // state[8,9] = 0
  state[8] = SALSA20_CI_AVX2;
  state[9] = #set0_256();

  return state;
}

inline fn __salsa20_init_1_x8_avx2(reg u64 _nonce, stack u32[8] key) -> reg u256[16]
{
  inline int i;
  reg u256[16] state;

  // state[1,2,3,4, 11,12,13,14] = key[0,1,2,3, 4,5,6,7]
  for i=0 to 4
  { state[i+1] = #VPBROADCAST_8u32(key[i]); }

  for i=4 to 8
  { state[i+7] = #VPBROADCAST_8u32(key[i]); }

  // state[0,5,10,15] = sigma[0,1,2,3]
  for i=0 to 4
  { state[i*5] = #VPBROADCAST_8u32(SALSA20_SIGMA_AVX2[i]); }

  // state[6,7] = nonce[0,1]
  for i=0 to 2
  { state[i+6] = #VPBROADCAST_8u32((u32)[_nonce + i*4]); }

  // state[8,9] = 0
  state[8] = SALSA20_CI_AVX2;
  state[9] = #set0_256();

  return state;
}

//
inline fn __salsa20_rotate_x8_avx2(reg u256 x, inline int r) -> reg u256
{
  reg u256 y;

  y  = x <<8u32 r;
  x  = x >>8u32 (32-r);
  x ^= y;

  return x;
}

inline fn __salsa20_line_x8_avx2(reg u256[16] state, inline int a b c r) -> reg u256[16]
{
  reg u256 t;

  t  = state[b] +8u32 state[c];
  t  = __salsa20_rotate_x8_avx2(t, r);
  state[a] ^= t;

  return state;
}

inline fn __salsa20_quarter_round_x8_avx2(reg u256[16] state, inline int a b c d) -> reg u256[16]
{
  state = __salsa20_line_x8_avx2(state, a, d, c, 7);
  state = __salsa20_line_x8_avx2(state, b, a, d, 9);
  state = __salsa20_line_x8_avx2(state, c, b, a, 13);
  state = __salsa20_line_x8_avx2(state, d, c, b, 18);
  return state;
}

inline fn __salsa20_half_round_x8_avx2(reg u256[16] state, inline int a b c d e f g h) -> reg u256[16]
{
  state = __salsa20_quarter_round_x8_avx2(state, a, b, c, d);
  state = __salsa20_quarter_round_x8_avx2(state, e, f, g, h);
  return state;
}

inline fn __salsa20_double_round_x8_avx2(reg u256[16] state, stack u256 state2 state3) -> reg u256[16], stack u256, stack u256
{
  stack u256 state12 state13;

  state = __salsa20_half_round_x8_avx2(state,
             4, 8, 12, 0,
             9, 13, 1, 5);

  state, state12, state13 = __salsa20_swap2_avx2(state, state2, state3, 2, 3, 12, 13);

  state = __salsa20_half_round_x8_avx2(state,
             14, 2, 6, 10,
             3, 7, 11, 15);

  state = __salsa20_half_round_x8_avx2(state,
             1, 2, 3, 0,
             6, 7, 4, 5);

  state, state2, state3 = __salsa20_swap2_avx2(state, state12, state13, 12, 13, 2, 3);

  state = __salsa20_half_round_x8_avx2(state,
             11, 8, 9, 10,
             12, 13, 14, 15);

  return state, state2, state3;
}

inline fn __salsa20_rounds_x8_avx2(reg u256[16] state) -> reg u256[16]
{
  inline int i;
  reg u32 c;
  stack u256 state2 state3;

  state2 = state[2];
  state3 = state[3];

  c = (SALSA20_ROUNDS / 2);
  while
  {
    state, state2, state3 = __salsa20_double_round_x8_avx2(state, state2, state3);
    _,_,_,_,c = #DEC_32(c);
  } (c > 0)
  
  state[2] = state2;
  state[3] = state3;

  return state;
}

inline fn __salsa20_add_x8_avx2(reg u256[16] state, stack u256[16] state_s) -> reg u256[16]
{
  inline int i;

  for i=0 to 16
  { state[i] +8u32= state_s[i]; }

  return state;
}

inline fn __salsa20_increment_counter_x8_avx2(stack u256[16] state_s) -> stack u256[16]
{
  inline int i;
  reg u256 a b x y;
  
  x = state_s[8]; //6 G 4 E 2 C 0 A
  y = state_s[9]; //7 H 5 F 3 D 1 B  
  
  a = #VPUNPCKL_8u32(x, y); // 5 4 F E 1 0 B A
  b = #VPUNPCKH_8u32(x, y); // 7 6 H G 3 2 D C
  
  a +4u64= SALSA20_P8_AVX2; 
  b +4u64= SALSA20_P8_AVX2;
  
  x = #VPUNPCKL_8u32(a, b); // H F G E D B C A
  y = #VPUNPCKH_8u32(a, b); // 7 5 6 4 3 1 2 0
  
  a = #VPUNPCKL_8u32(x, y); // 6 G 4 E 2 C 0 A
  b = #VPUNPCKH_8u32(x, y); // 7 H 5 F 3 D 1 B
  
  state_s[8] = a;
  state_s[9] = b;
  
  return state_s;
}

//
inline fn __salsa20_r8_0_avx2(reg u64 _c _m _mlen _nonce _key)
{
  reg u256[16] state;
  stack u256[16] state_s;

  state = __salsa20_init_0_x8_avx2(_nonce, _key);
  state_s = state;

  while(_mlen >= 512)
  {
    state = __salsa20_rounds_x8_avx2(state);
    state = __salsa20_add_x8_avx2(state, state_s);
    state, _c, _m, _mlen = __store_x8_avx2(_c, _m, _mlen, state);
    state_s = __salsa20_increment_counter_x8_avx2(state_s);
    state = state_s;
  }

  if(_mlen > 0)
  {
    state = __salsa20_rounds_x8_avx2(state);
    state = __salsa20_add_x8_avx2(state, state_s);
    __store_x8_last_avx2(_c, _m, _mlen, state);
  }
}

inline fn __salsa20_r8_1_avx2(reg u64 _c _m _mlen _nonce, stack u32[8] key)
{
  reg u256[16] state;
  stack u256[16] state_s;

  state = __salsa20_init_1_x8_avx2(_nonce, key);
  state_s = state;

  while(_mlen >= 512)
  {
    state = __salsa20_rounds_x8_avx2(state);
    state = __salsa20_add_x8_avx2(state, state_s);
    state, _c, _m, _mlen = __store_x8_avx2(_c, _m, _mlen, state);
    state_s = __salsa20_increment_counter_x8_avx2(state_s);
    state = state_s;
  }

  if(_mlen > 0)
  {
    state = __salsa20_rounds_x8_avx2(state);
    state = __salsa20_add_x8_avx2(state, state_s);
    __store_x8_last_avx2(_c, _m, _mlen, state);
  }
}

#endif
