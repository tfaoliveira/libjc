
// nonce : 8 bytes
// key : 32 bytes
// counter : 8 bytes (starts at 0)
inline fn __init_ref(reg u64 nonce key) -> stack u32[16]
{
  inline int i;
  stack u32[16] st;
  reg u32 t;

  // st[1,2,3,4, 11,12,13,14] = key[0,1,2,3, 4,5,6,7]
  for i=0 to 4
  { t = (u32)[key + i*4];
    st[i+1] = t; }

  for i=4 to 8
  { t = (u32)[key + i*4];
    st[i+7] = t; }

  // st[0,5,10,15] = sigma[0,1,2,3]
  st[0]  = 0x61707865;
  st[5]  = 0x3320646e;
  st[10] = 0x79622d32;
  st[15] = 0x6b206574;

  // st[6,7] = nonce[0,1]
  for i=0 to 2
  { t = (u32)[nonce + i*4];
    st[i+6] = t; }

  // st[8,9] = 0
  for i=0 to 2
  { st[i+8] = 0; }

  return st;
}


// nonce : 8 bytes
// key : 32 bytes
// counter : 8 bytes (starts at 0)
inline fn __init_1_ref(reg u64 nonce, reg u32[8] key) -> stack u32[16]
{
  inline int i;
  stack u32[16] st;
  reg u32 t;

  // st[1,2,3,4, 11,12,13,14] = key[0,1,2,3, 4,5,6,7]
  for i=0 to 4
  { st[i+1] = key[i]; }

  for i=4 to 8
  { st[i+7] = key[i]; }

  // st[0,5,10,15] = sigma[0,1,2,3]
  st[0]  = 0x61707865;
  st[5]  = 0x3320646e;
  st[10] = 0x79622d32;
  st[15] = 0x6b206574;

  // st[6,7] = nonce[0,1]
  for i=0 to 2
  { t = (u32)[nonce + i*4];
    st[i+6] = t; }

  // st[8,9] = 0
  for i=0 to 2
  { st[i+8] = 0; }

  return st;
}


// increments 64-bit counter
inline fn __increment_counter_ref(stack u32[16] st) -> stack u32[16]
{
  reg u64 t;

  t = st[u64 4];
  t += 1;
  st[u64 4] = t;

  return st;
}


