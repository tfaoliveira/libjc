
//require "crypto_stream/salsa20/ref/salsa20.jinc"
require "../../salsa20/ref/salsa20.jinc"

// nonce : 16 bytes
// key : 32 bytes
inline fn __hsalsa20_init_ref(reg u64 nonce key) -> reg u32[16], stack u32, stack u32
{
  inline int i;
  reg u32[16] st;
  stack u32 st2 st3;

  // st[1,2,3,4, 11,12,13,14] = key[0,1,2,3, 4,5,6,7]
  for i=0 to 4
  { st[i+1] = (u32)[key + i*4]; }

  st2 = st[2];
  st3 = st[3];

  for i=4 to 8
  { st[i+7] = (u32)[key + i*4]; }

  // sigma
  st[0]  = 0x61707865;
  st[5]  = 0x3320646e;
  st[10] = 0x79622d32;
  st[15] = 0x6b206574;

  // st[6,7,8,9] = nonce[0,1,2,3]
  for i=0 to 4
  { st[i+6] = (u32)[nonce + i*4]; }

  return st, st2, st3;
}

inline fn __hsalsa20_store_ref(reg u32[16] sk) -> reg u32[8]
{
  inline int i;
  reg u32[8] sks;
  
  for i=0 to 4
  { sks[i] = sk[5*i]; } //sks[0,1,2,3] = sk[0,5,10,15]

  for i=0 to 4
  { sks[i+4] = sk[6+i]; } //sks[4,5,6,7] = sk[6,7,8,9]
  
  return sks;
}

inline fn __hsalsa20_ref(reg u64 nonce key) -> reg u32[8]
{
  reg u32[16] st;
  reg u32[8] sk;
  stack u32 st2 st3 st15;

  st, st2, st3 = __hsalsa20_init_ref(nonce, key);
  st, st15 = __rounds_ref(st, st2, st3);
  st[15] = st15;
  sk = __hsalsa20_store_ref(st);

  return sk;
}


