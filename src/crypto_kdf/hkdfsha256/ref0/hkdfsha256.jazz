#ifndef HKDFSHA256_REF0
#define HKDFSHA256_REF0

#include "crypto_auth/hmacsha256/ref0/hmacsha256.jazz"
#include "utils/spill.jazz"

// returns ceil(x / 2^n)
fn ceil(reg u64 x, inline int n) -> reg u64
{
  reg u64 c y;

  c = x;
  c >>= n;

  y = x;
  y &= ((2^n)-1);

  if( y > 0 )
  { c += 1; }

  return c;
}

fn min(reg u64 x, reg u64 y) -> reg u64
{
  reg u64 c;
  if(x < y)
  { c = x; }
  else
  { c = y; }
  return c;
}

fn memcpy_u8(reg u64 dest src n)
{
  reg u64 i;
  reg u8 c;

  i = 0;
  while (i < n)
  { c = (u8)[src + i];
    (u8)[dest + i] = c;
    i += 1;
  }
}


// hkpadded with (32 + 128)
fn _hkdfsha256_extract(reg u64 PRK salt saltlen IKM IKMlen hkpadded)
{
  _hmacsha256_ref0(PRK, IKM, IKMlen, salt, saltlen, hkpadded);
}

// hkpadded_Tinfoc: hkpadded (32 + 128) + Tinfoc (32 + infolen + 1)
fn _hkdfsha256_expand(reg u64 OKM PRK info infolen L hkpadded_Tinfoc)
{
  stack u64 N_s L_s OKM_s Tinfoc_s in_s Tinfoclen_s infolen_s PRK_s hkpadded_s;
  stack u8 C_s;

  reg u64 N Tlen Tinfoc in Tinfoclen hkpadded;
  reg u8 C;

  hkpadded = hkpadded_Tinfoc;
  Tinfoc = hkpadded_Tinfoc + (32+128);

  // N = ceil(L/HashLen)
  N = ceil(L, 5);

  // OKM = first L octets of T
  //  where T = T(1) | T(2) | T(3) | ... | T(N)
  //        T0 = empty string (zero length)
  //        T1 = HMAC-Hash(PRK, T0 | info | 0x01)
  //        T2 = HMAC-Hash(PRK, T1 | info | 0x02)

  memcpy_u8(Tinfoc+32, info, infolen);

  Tlen = 0;
  C = 0x1;

  while(N > 0)
  {
    (u8)[Tinfoc + 32 + infolen] = C;

    Tinfoclen = infolen + 1;
    Tinfoclen += Tlen;

    in = Tinfoc + 32;
    in -= Tlen;

    N_s, L_s, OKM_s, Tinfoc_s, in_s, Tinfoclen_s, infolen_s, PRK_s, hkpadded_s = 
      r2s_x9(N, L, OKM, Tinfoc, in, Tinfoclen, infolen, PRK, hkpadded);
    C_s = C;

    _hmacsha256_ref0(Tinfoc, in, Tinfoclen, PRK, 32, hkpadded);

    C = C_s;
    N, L, OKM, Tinfoc, in, Tinfoclen, infolen, PRK, hkpadded = 
      s2r_x9(N_s, L_s, OKM_s, Tinfoc_s, in_s, Tinfoclen_s, infolen_s, PRK_s, hkpadded_s);

    Tlen = min(32, L);
    memcpy_u8(OKM, Tinfoc, Tlen);

    OKM += Tlen;
    L -= Tlen;

    N -= 1;
    C += 1;
  }
}

#endif

