#ifndef KECCAKF1600_REF
#define KECCAKF1600_REF

u64[24] keccakRoundConstants = {
  0x0000000000000001,
  0x0000000000008082,
  0x800000000000808a,
  0x8000000080008000,
  0x000000000000808b,
  0x0000000080000001,
  0x8000000080008081,
  0x8000000000008009,
  0x000000000000008a,
  0x0000000000000088,
  0x0000000080008009,
  0x000000008000000a,
  0x000000008000808b,
  0x800000000000008b,
  0x8000000000008089,
  0x8000000000008003,
  0x8000000000008002,
  0x8000000000000080,
  0x000000000000800a,
  0x800000008000000a,
  0x8000000080008081,
  0x8000000000008080,
  0x0000000080000001,
  0x8000000080008008
};

inline
fn index(inline int x, inline int y) -> inline int {
  inline int r;
  r = (x % 5) + 5 * (y % 5);
  return r;
}


inline
fn ROL64(reg u64 x, inline int c) -> reg u64 {
  reg u64 y;
  _, _, y = #ROL_64(x, c);
  return y;
}


fn theta(stack u64[25] a) -> stack u64[25] {
  inline int x, y;
  reg u64[5] c, d;

  for x = 0 to 5 {
    c[x] = 0;
    for y = 0 to 5 {
      c[x] ^= a[x + 5 * y];
    }
  }

  for x = 0 to 5 {
    /* d[x] = ROL64(c[(x + 1) % 5], 1); */
    /* extraction fails */

    /*    _, _, d[x] = #ROL_64(c[(x + 1) % 5], 1);*/
    /*    d[x] ^= c[(x + 4) % 5];*/
    /* does not compile */

    d[x] = c[(x + 1) % 5];
    _, _, d[x] = #ROL_64(d[x], 1);
    d[x] ^= c[(x + 4) % 5];
  }

  for x = 0 to 5 {
    for y = 0 to 5 {
      a[x + 5 * y] ^= d[x];
    }
  }

  return a;
}


inline
fn keccakRhoOffsets(inline int i) -> inline int {
  inline int r, x, y, z, t;

  r = 0;
  x = 1;
  y = 0;
  for t = 0 to 24 {
    if (i == x + 5 * y) {
      r = ((t + 1) * (t + 2) / 2) % 64;
    }
    z = (2 * x + 3 * y) % 5;
    x = y;
    y = z;
  }

  return r;
}


fn rho(stack u64[25] a) -> stack u64[25] {
  inline int x, y, i, z;

  for x = 0 to 5 {
    for y = 0 to 5 {
      i = index(x, y);
      z = keccakRhoOffsets(i);
      _, _, a[i] = #ROL_64(a[i], z);
    }
  }

  return a;
}


fn pi(stack u64[25] a) -> stack u64[25] {
  stack u64[25] b;
  reg u64 t;
  inline int x, y, i;
  for i = 0 to 25 { t = a[i]; b[i] = t; }

  for x = 0 to 5 {
    for y = 0 to 5 {
      t = b[x + 5 * y];
      i = index(y, 2 * x + 3 * y);
      a[i] = t;
    }
  }
  return a;
}


fn chi(stack u64[25] a) -> stack u64[25] {
  inline int x, y, i;
  reg u64[5] c;
  for y = 0 to 5 {
    for x = 0 to 5 {
      i = index(x + 1, y);
      c[x] = a[i];
      c[x] = !c[x];
      i = index(x + 2, y);
      c[x] &= a[i];
      i = index(x, y);
      c[x] ^= a[i];
    }
    for x = 0 to 5 {
      a[x + 5 * y] = c[x];
    }
  }
  return a;
}


fn iota(stack u64[25] a, reg u64 c) -> stack u64[25] {
  a[0] ^= c;
  return a;
}


fn keccakP1600_round(stack u64[25] state, reg u64 c) -> stack u64[25] {
  state = theta(state);
  state = rho(state);
  state = pi(state);
  state = chi(state);
  state = iota(state, c);
  return state;
}


fn __keccakf1600_ref(stack u64[25] state) -> stack u64[25]
{
  #if 0
  inline int round;
  for round = 0 to 24 {
    // RC get's loaded into a register
    // with global arrays - 3k cycles/16KiB/shake256 w/ 136 bytes
    state = keccakP1600_round(state, keccakRoundConstants[round]);
  }
  #else
  reg u64 round RC;
  reg ptr u64[24] kRCp;

  kRCp = keccakRoundConstants;
  round = 0;
  while(round < 24)
  {
    RC = kRCp[(int) round];
    state = keccakP1600_round(state, RC);
    round += 1;
  }
  #endif

  return state;
}

#endif
