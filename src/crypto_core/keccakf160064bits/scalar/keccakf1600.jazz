#ifndef CRYPTO_CORE_KECCAKF160064BITS_SCALAR
#define CRYPTO_CORE_KECCAKF160064BITS_SCALAR

// reversed iotas with the first position at zero
u64[25] iotas_r =
{  0x0000000000000000
  ,0x8000000080008008
  ,0x0000000080000001
  ,0x8000000000008080
  ,0x8000000080008081
  ,0x800000008000000a
  ,0x000000000000800a
  ,0x8000000000000080
  ,0x8000000000008002
  ,0x8000000000008003
  ,0x8000000000008089
  ,0x800000000000008b
  ,0x000000008000808b
  ,0x000000008000000a
  ,0x0000000080008009
  ,0x0000000000000088
  ,0x000000000000008a
  ,0x8000000000008009
  ,0x8000000080008081
  ,0x0000000080000001
  ,0x000000000000808b
  ,0x8000000080008000
  ,0x800000000000808a
  ,0x0000000000008082
  ,0x0000000000000001
};

u64[24] iotas = {
   0x0000000000000001
  ,0x0000000000008082
  ,0x800000000000808a
  ,0x8000000080008000
  ,0x000000000000808b
  ,0x0000000080000001
  ,0x8000000080008081
  ,0x8000000000008009
  ,0x000000000000008a
  ,0x0000000000000088
  ,0x0000000080008009
  ,0x000000008000000a
  ,0x000000008000808b
  ,0x800000000000008b
  ,0x8000000000008089
  ,0x8000000000008003
  ,0x8000000000008002
  ,0x8000000000000080
  ,0x000000000000800a
  ,0x800000008000000a
  ,0x8000000080008081
  ,0x8000000000008080
  ,0x0000000080000001
  ,0x8000000080008008
};


// CHECKME: replace by index calls?
#define S(base,x,y) base[(5*((x) % 5) + ((y) % 5))]

inline fn __index(inline int x, inline int y) -> inline int
{
  inline int r;
  r = 5*(x % 5) + (y % 5);
  return r;
}


inline fn __keccak_rho_offsets(inline int i) -> inline int
{
  inline int r, x, y, z, t;
  r = 0;
  x = 1;
  y = 0;
  for t = 0 to 24
  { if ( i == x + 5 * y )
    { r = ((t + 1) * (t + 2) / 2) % 64;
    }
    z = (2 * x + 3 * y) % 5;
    x = y;
    y = z;
  }

  return r;
}


inline fn __rhotates(inline int x y) -> inline int
{
  inline int i r;
  i = __index(x, y);
  r = __keccak_rho_offsets(i);
  return r;
}


inline fn __ROL64(reg u64 x, inline int c) -> reg u64
{
  reg u64 y;
  if (c == 0)
  { y = x; }
  else
  { _, _, y = #ROL_64(x, c); }
  return y;
}


inline fn __theta_sum(stack u64[25] a) -> reg u64[5]
{
  inline int i j;
  reg u64[5] c;

  for i=0 to 5
  { c[i] =  S(a, 0, i); }

  for j=1 to 5
  { for i=0 to 5
    { c[i] ^= S(a, j, i); }
  }

  return c;
}


inline fn __theta_rol(reg u64[5] c) -> reg u64[5]
{
  inline int i;
  reg u64[5] d;
  reg u64 t r;

  for i = 0 to 5
  { d[i] = c[(i+1)%5];
    _, _, d[i] = #ROL_64(d[i], 1);
    d[i] ^= c[(i+4)%5];
  }

  return d;
}


inline fn __rol_sum(
  reg u64[5] d,
  stack u64[25] a,
  inline int offset
) -> reg u64[5]
{
  inline int j j1 k;
  reg u64[5] c;
  reg u64 t;

  for j = 0 to 5
  {
    j1 = (j+offset) % 5;
    k = __rhotates(j, j1);
    t = S(a,j,j1);
    t ^= d[j1];
    t = __ROL64(t, k);
    c[j] = t;
  }

  return c;
}


inline fn __set_row(
  stack u64[25] r,
  inline int row,
  reg u64[5] c,
  reg u64 iota
) -> stack u64[25]
{
  inline int j j1 j2;
  reg u64 t;

  for j= 0 to 5
  {
    j1 = (j+1) % 5;
    j2 = (j+2) % 5;
    t = !c[j1] & c[j2];
    if row==0 && j==0 { t ^= iota; }
    t ^= c[j];
    S(r, row, j) = t;
  }

  return r;
}


inline fn __round2x(stack u64[25] a, stack u64[25] r, reg u64 iota) -> stack u64[25], stack u64[25]
{
  reg u64[5] c d;

  c = __theta_sum(a);
  d = __theta_rol(c);
  c = __rol_sum(d, a, 0);
  r = __set_row(r, 0, c, iota);
  c = __rol_sum(d, a, 3);
  r = __set_row(r, 1, c, iota);
  c = __rol_sum(d, a, 1);
  r = __set_row(r, 2, c, iota);
  c = __rol_sum(d, a, 4);
  r = __set_row(r, 3, c, iota);
  c = __rol_sum(d, a, 2);
  r = __set_row(r, 4, c, iota);

  return a, r;
}

inline fn __get_iota(reg ptr u64[25] sp, reg u64 round) -> stack u64
{
  reg ptr u64[25] p;
  stack u64 sv;
  reg u64 v;

  p = sp;
  v = p[(int)round];
  sv = v;

  return sv;
}

inline fn __keccakf1600_scalar(stack u64[25] a) -> stack u64[25]
{
  #if 0
  reg bool zf;
  stack u64[25] r;
  reg ptr u64[25] iotas_p;
  reg u64 iota round;

  iotas_p = iotas_r;
  round = 24;

  while
  {
    iota = iotas_p[(int) round];
    a, r = __round2x(a, r, iota);
    round -= 1;

    iota = iotas_p[(int) round];
    r, a = __round2x(r, a, iota);
    (_, _, _, zf, round) = #DEC(round);

  } (!zf)
  #else
  // 2.7K cycles faster for 16KiB
  stack u64[25] r;
  reg ptr u64[24] iotas_p;
  reg u64 iota round;

  iotas_p = iotas;
  round = 0;

  while(round < 24)
  {
    iota = iotas_p[(int) round];
    a, r = __round2x(a, r, iota);
    round += 1;

    iota = iotas_p[(int) round];
    r, a = __round2x(r, a, iota);
    round += 1;
  }
  #endif

  return a;
}

#undef S

#ifdef EXPORT

export fn keccakf1600_scalar(reg u64 out in)
{
  inline int i;
  stack u64[25] state;
  reg u64 t;

  for i=0 to 25
  { t = [in + 8*i];
    state[i] = t; }

  state = __keccakf1600_scalar(state);

  for i=0 to 25
  { t = state[i];
    [out + 8*i] = t; }
}

#endif

#endif
